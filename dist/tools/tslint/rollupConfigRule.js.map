{"version":3,"file":"rollupConfigRule.js","sourceRoot":"","sources":["../../../tools/tslint/rollupConfigRule.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport {RuleFailure} from 'tslint/lib';\nimport {AbstractRule} from 'tslint/lib/rules';\nimport * as ts from 'typescript';\n\n\nfunction _isRollupPath(path: string) {\n  return /rollup\\.config\\.js$/.test(path);\n}\n\n// Regexes to blacklist.\nconst sourceFilePathBlacklist = [\n  /\\.spec\\.ts$/,\n  /_spec\\.ts$/,\n  /_perf\\.ts$/,\n  /_example\\.ts$/,\n  /[/\\\\]test[/\\\\]/,\n  /[/\\\\]testing_internal\\.ts$/,\n  /[/\\\\]integrationtest[/\\\\]/,\n  /[/\\\\]packages[/\\\\]bazel[/\\\\]/,\n  /[/\\\\]packages[/\\\\]benchpress[/\\\\]/,\n  /[/\\\\]packages[/\\\\]examples[/\\\\]/,\n  /[/\\\\]packages[/\\\\]elements[/\\\\]schematics[/\\\\]/,\n\n  // language-service bundles everything in its UMD, so we don't need a globals. There are\n  // exceptions but we simply ignore those files from this rule.\n  /[/\\\\]packages[/\\\\]language-service[/\\\\]/,\n\n  // Compiler CLI is never part of a browser (there's a browser-rollup but it's managed\n  // separately.\n  /[/\\\\]packages[/\\\\]compiler-cli[/\\\\]/,\n\n  // service-worker is a special package that has more than one rollup config. It confuses\n  // this lint rule and we simply ignore those files.\n  /[/\\\\]packages[/\\\\]service-worker[/\\\\]/,\n];\n\n// Import package name whitelist. These will be ignored.\nconst importsWhitelist = [\n  '@angular/compiler-cli',                        // Not used in a browser.\n  '@angular/compiler-cli/src/language_services',  // Deep import from language-service.\n  'chokidar',  // Not part of compiler-cli/browser, but still imported.\n  'reflect-metadata',\n  'tsickle',\n  'url',  // Part of node, no need to alias in rollup.\n  'zone.js',\n];\n\nconst packageScopedImportWhitelist: [RegExp, string[]][] = [\n  [/service-worker[/\\\\]cli/, ['@angular/service-worker']],\n];\n\n\n// Return true if the file should be linted.\nfunction _pathShouldBeLinted(path: string) {\n  return /[/\\\\]packages[/\\\\]/.test(path) && sourceFilePathBlacklist.every(re => !re.test(path));\n}\n\n\n/**\n *                  .--.         _________________\n *  {\\             / q {\\      / globalGlobalMap /\n *  { `\\           \\ (-(~`   <__________________/\n * { '.{`\\          \\ \\ )\n * {'-{ ' \\  .-\"\"'-. \\ \\\n * {._{'.' \\/       '.) \\\n * {_.{.   {`            |\n * {._{ ' {   ;'-=-.     |\n *  {-.{.' {  ';-=-.`    /\n *   {._.{.;    '-=-   .'\n *    {_.-' `'.__  _,-'\n *             |||`\n *            .='==,\n */\ninterface RollupMatchInfo {\n  filePath: string;\n  globals: {[packageName: string]: string};\n}\nconst globalGlobalRollupMap = new Map<string, RollupMatchInfo>();\n\n\nexport class Rule extends AbstractRule {\n  public apply(sourceFile: ts.SourceFile): RuleFailure[] {\n    const allImports = <ts.ImportDeclaration[]>sourceFile.statements.filter(\n        x => x.kind === ts.SyntaxKind.ImportDeclaration);\n\n    // Ignore specs, non-package files, and examples.\n    if (!_pathShouldBeLinted(sourceFile.fileName)) {\n      return [];\n    }\n\n    // Find the rollup.config.js from this location, if it exists.\n    // If rollup cannot be found, this is an error.\n    let p = path.dirname(sourceFile.fileName);\n    let checkedPaths = [];\n    let match: RollupMatchInfo;\n\n    while (p.startsWith(process.cwd())) {\n      if (globalGlobalRollupMap.has(p)) {\n        // We already resolved for this directory, just return it.\n        match = globalGlobalRollupMap.get(p);\n        break;\n      }\n\n      const allFiles = fs.readdirSync(p);\n      const maybeRollupPath = allFiles.find(x => _isRollupPath(path.join(p, x)));\n      if (maybeRollupPath) {\n        const rollupFilePath = path.join(p, maybeRollupPath);\n        const rollupConfig = require(rollupFilePath);\n        match = {filePath: rollupFilePath, globals: rollupConfig && rollupConfig.globals};\n\n        // Update all paths that we checked along the way.\n        checkedPaths.forEach(path => globalGlobalRollupMap.set(path, match));\n        globalGlobalRollupMap.set(rollupFilePath, match);\n        break;\n      }\n\n      checkedPaths.push(p);\n      p = path.dirname(p);\n    }\n    if (!match) {\n      throw new Error(\n          `Could not find rollup.config.js for ${JSON.stringify(sourceFile.fileName)}.`);\n    }\n\n    const rollupFilePath = match.filePath;\n    const globalConfig = match.globals || Object.create(null);\n\n    return allImports\n        .map(importStatement => {\n          const modulePath = (importStatement.moduleSpecifier as ts.StringLiteral).text;\n          if (modulePath.startsWith('.')) {\n            return null;\n          }\n\n          if (importsWhitelist.indexOf(modulePath) != -1) {\n            return null;\n          }\n\n          for (const [re, arr] of packageScopedImportWhitelist) {\n            if (re.test(sourceFile.fileName) && arr.indexOf(modulePath) != -1) {\n              return null;\n            }\n          }\n\n          if (!(modulePath in globalConfig)) {\n            return new RuleFailure(\n                sourceFile, importStatement.getStart(), importStatement.getWidth(),\n                `Import ${JSON.stringify(modulePath)} could not be found in the rollup config ` +\n                    `at path ${JSON.stringify(rollupFilePath)}.`,\n                this.ruleName, );\n          }\n\n          return null;\n        })\n        .filter(x => !!x);\n  }\n}\n"]}