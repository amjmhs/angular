{"version":3,"file":"cli.js","sourceRoot":"","sources":["../../../tools/symbol-extractor/cli.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;AAEH,uBAAyB;AAEzB,uDAAmD;AAEnD,IAAI,OAAO,CAAC,IAAI,KAAK,MAAM,EAAE;IAC3B,IAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAoB,CAAC;IACtD,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;CACvC;AAED;;;;;;GAMG;AACH,cAAc,IAAiD;IAC7D,IAAM,kBAAkB,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IACpD,IAAM,cAAc,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAChD,IAAM,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,UAAU,CAAC;IAEvC,IAAM,iBAAiB,GAAG,EAAE,CAAC,YAAY,CAAC,kBAAkB,CAAC,CAAC,QAAQ,EAAE,CAAC;IACzE,IAAM,aAAa,GAAG,EAAE,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC,QAAQ,EAAE,CAAC;IAEjE,IAAM,eAAe,GAAG,IAAI,kCAAe,CAAC,kBAAkB,EAAE,iBAAiB,CAAC,CAAC;IAEnF,IAAI,MAAM,GAAY,KAAK,CAAC;IAC5B,IAAI,QAAQ,EAAE;QACZ,EAAE,CAAC,aAAa,CAAC,cAAc,EAAE,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,MAAM,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;QACvF,OAAO,CAAC,KAAK,CAAC,oBAAoB,EAAE,cAAc,CAAC,CAAC;QACpD,MAAM,GAAG,IAAI,CAAC;KACf;SAAM;QACL,MAAM,GAAG,eAAe,CAAC,oBAAoB,CAAC,cAAc,EAAE,aAAa,CAAC,CAAC;QAC7E,IAAI,CAAC,MAAM,EAAE;YACX,IAAM,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;YACvC,IAAM,UAAU,GAAG,CAAC,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,sBAAoB,OAAO,MAAG,CAAC,CAAC,CAAC,EAAE,CAAC;YAChF,OAAO,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;YAC9B,OAAO,CAAC,KAAK,CAAC,mCAAmC,CAAC,CAAC;YACnD,OAAO,CAAC,KAAK,CAAC,mBAAiB,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,YAAS,CAAC,CAAC;SACnF;KACF;IACD,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport {SymbolExtractor} from './symbol_extractor';\n\nif (require.main === module) {\n  const args = process.argv.slice(2) as[string, string];\n  process.exitCode = main(args) ? 0 : 1;\n}\n\n/**\n * CLI main method.\n *\n * ```\n *   cli javascriptFilePath.js goldenFilePath.json\n * ```\n */\nfunction main(argv: [string, string, string] | [string, string]): boolean {\n  const javascriptFilePath = require.resolve(argv[0]);\n  const goldenFilePath = require.resolve(argv[1]);\n  const doUpdate = argv[2] == '--accept';\n\n  const javascriptContent = fs.readFileSync(javascriptFilePath).toString();\n  const goldenContent = fs.readFileSync(goldenFilePath).toString();\n\n  const symbolExtractor = new SymbolExtractor(javascriptFilePath, javascriptContent);\n\n  let passed: boolean = false;\n  if (doUpdate) {\n    fs.writeFileSync(goldenFilePath, JSON.stringify(symbolExtractor.actual, undefined, 2));\n    console.error('Updated gold file:', goldenFilePath);\n    passed = true;\n  } else {\n    passed = symbolExtractor.compareAndPrintError(goldenFilePath, goldenContent);\n    if (!passed) {\n      const compile = process.env['compile'];\n      const defineFlag = (compile !== 'legacy') ? `--define=compile=${compile} ` : '';\n      console.error(`TEST FAILED!`);\n      console.error(`  To update the golden file run: `);\n      console.error(`    bazel run ${defineFlag}${process.env['BAZEL_TARGET']}.accept`);\n    }\n  }\n  return passed;\n}\n"]}