{"version":3,"file":"symbol_extractor_spec.js","sourceRoot":"","sources":["../../../tools/symbol-extractor/symbol_extractor_spec.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;AAEH,uBAAyB;AACzB,2BAA6B;AAG7B,uDAA2D;AAE3D,QAAQ,CAAC,WAAW,EAAE;IACpB,IAAM,sBAAsB,GAAG,IAAI,CAAC,OAAO,CACvC,OAAO,CAAC,OAAO,CAAC,iEAAiE,CAAC,CAAC,CAAC;IACxF,IAAM,aAAa,GAAG,EAAE,CAAC,WAAW,CAAC,sBAAsB,CAAC,CAAC;4BACpD,CAAC;QACR,IAAI,MAAM,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;QAC9B,IAAI,QAAQ,GAAG,aAAa,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACpC,IAAI,QAAQ,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;QAC5D,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC;YAAE,MAAM,IAAI,KAAK,CAAC,4BAA4B,GAAG,MAAM,CAAC,CAAC;QACpF,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC;YAAE,MAAM,IAAI,KAAK,CAAC,8BAA8B,GAAG,QAAQ,CAAC,CAAC;QAE5F,qDAAqD;QACrD,sDAAsD;QAEtD,EAAE,CAAC,QAAQ,EAAE;YACX,IAAM,aAAa,GAAG,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,EAAE,MAAM,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;YAC5F,IAAM,eAAe,GACjB,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,EAAE,QAAQ,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;YAC5E,IAAM,OAAO,GAAG,kCAAe,CAAC,KAAK,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;YAC/D,IAAM,IAAI,GAAG,kCAAe,CAAC,IAAI,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC;YAC5D,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;IACL,CAAC;IAlBD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC;gBAA1C,CAAC;KAkBT;AACH,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as ts from 'typescript';\n\nimport {Symbol, SymbolExtractor} from './symbol_extractor';\n\ndescribe('scenarios', () => {\n  const symbolExtractorSpecDir = path.dirname(\n      require.resolve('angular/tools/symbol-extractor/symbol_extractor_spec/empty.json'));\n  const scenarioFiles = fs.readdirSync(symbolExtractorSpecDir);\n  for (let i = 0; i < scenarioFiles.length; i = i + 2) {\n    let jsFile = scenarioFiles[i];\n    let jsonFile = scenarioFiles[i + 1];\n    let testName = jsFile.substring(0, jsFile.lastIndexOf('.'));\n    if (!jsFile.endsWith('.js')) throw new Error('Expected: .js file found: ' + jsFile);\n    if (!jsonFile.endsWith('.json')) throw new Error('Expected: .json file found: ' + jsonFile);\n\n    // Left here so that it is easy to debug single test.\n    // if (testName !== 'hello_world_min_debug') continue;\n\n    it(testName, () => {\n      const jsFileContent = fs.readFileSync(path.join(symbolExtractorSpecDir, jsFile)).toString();\n      const jsonFileContent =\n          fs.readFileSync(path.join(symbolExtractorSpecDir, jsonFile)).toString();\n      const symbols = SymbolExtractor.parse(testName, jsFileContent);\n      const diff = SymbolExtractor.diff(symbols, jsonFileContent);\n      expect(diff).toEqual({});\n    });\n  }\n});\n"]}