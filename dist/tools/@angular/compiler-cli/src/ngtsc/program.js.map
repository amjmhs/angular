{"version":3,"file":"program.js","sourceRoot":"","sources":["../../../../../../packages/compiler-cli/src/ngtsc/program.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {GeneratedFile} from '@angular/compiler';\nimport * as path from 'path';\nimport * as ts from 'typescript';\n\nimport * as api from '../transformers/api';\n\nimport {ComponentDecoratorHandler, DirectiveDecoratorHandler, InjectableDecoratorHandler, NgModuleDecoratorHandler, PipeDecoratorHandler, ResourceLoader, SelectorScopeRegistry} from './annotations';\nimport {CompilerHost} from './compiler_host';\nimport {TypeScriptReflectionHost} from './metadata';\nimport {FileResourceLoader, HostResourceLoader} from './resource_loader';\nimport {IvyCompilation, ivyTransformFactory} from './transform';\n\nexport class NgtscProgram implements api.Program {\n  private tsProgram: ts.Program;\n  private resourceLoader: ResourceLoader;\n  private compilation: IvyCompilation|undefined = undefined;\n\n  private _coreImportsFrom: ts.SourceFile|null|undefined = undefined;\n  private _reflector: TypeScriptReflectionHost|undefined = undefined;\n  private _isCore: boolean|undefined = undefined;\n\n  constructor(\n      rootNames: ReadonlyArray<string>, private options: api.CompilerOptions,\n      private host: api.CompilerHost, oldProgram?: api.Program) {\n    this.resourceLoader = host.readResource !== undefined ?\n        new HostResourceLoader(host.readResource.bind(host)) :\n        new FileResourceLoader();\n\n    this.tsProgram =\n        ts.createProgram(rootNames, options, host, oldProgram && oldProgram.getTsProgram());\n  }\n\n  getTsProgram(): ts.Program { return this.tsProgram; }\n\n  getTsOptionDiagnostics(cancellationToken?: ts.CancellationToken|\n                         undefined): ReadonlyArray<ts.Diagnostic> {\n    return this.tsProgram.getOptionsDiagnostics(cancellationToken);\n  }\n\n  getNgOptionDiagnostics(cancellationToken?: ts.CancellationToken|\n                         undefined): ReadonlyArray<api.Diagnostic> {\n    return [];\n  }\n\n  getTsSyntacticDiagnostics(\n      sourceFile?: ts.SourceFile|undefined,\n      cancellationToken?: ts.CancellationToken|undefined): ReadonlyArray<ts.Diagnostic> {\n    return this.tsProgram.getSyntacticDiagnostics(sourceFile, cancellationToken);\n  }\n\n  getNgStructuralDiagnostics(cancellationToken?: ts.CancellationToken|\n                             undefined): ReadonlyArray<api.Diagnostic> {\n    return [];\n  }\n\n  getTsSemanticDiagnostics(\n      sourceFile?: ts.SourceFile|undefined,\n      cancellationToken?: ts.CancellationToken|undefined): ReadonlyArray<ts.Diagnostic> {\n    return this.tsProgram.getSemanticDiagnostics(sourceFile, cancellationToken);\n  }\n\n  getNgSemanticDiagnostics(\n      fileName?: string|undefined,\n      cancellationToken?: ts.CancellationToken|undefined): ReadonlyArray<api.Diagnostic> {\n    return [];\n  }\n\n  async loadNgStructureAsync(): Promise<void> {\n    if (this.compilation === undefined) {\n      this.compilation = this.makeCompilation();\n\n      await this.tsProgram.getSourceFiles()\n          .filter(file => !file.fileName.endsWith('.d.ts'))\n          .map(file => this.compilation !.analyzeAsync(file))\n          .filter((result): result is Promise<void> => result !== undefined);\n    }\n  }\n\n  listLazyRoutes(entryRoute?: string|undefined): api.LazyRoute[] {\n    throw new Error('Method not implemented.');\n  }\n\n  getLibrarySummaries(): Map<string, api.LibrarySummary> {\n    throw new Error('Method not implemented.');\n  }\n\n  getEmittedGeneratedFiles(): Map<string, GeneratedFile> {\n    throw new Error('Method not implemented.');\n  }\n\n  getEmittedSourceFiles(): Map<string, ts.SourceFile> {\n    throw new Error('Method not implemented.');\n  }\n\n  emit(opts?: {\n    emitFlags?: api.EmitFlags,\n    cancellationToken?: ts.CancellationToken,\n    customTransformers?: api.CustomTransformers,\n    emitCallback?: api.TsEmitCallback,\n    mergeEmitResultsCallback?: api.TsMergeEmitResultsCallback\n  }): ts.EmitResult {\n    const emitCallback = opts && opts.emitCallback || defaultEmitCallback;\n\n    if (this.compilation === undefined) {\n      this.compilation = this.makeCompilation();\n      this.tsProgram.getSourceFiles()\n          .filter(file => !file.fileName.endsWith('.d.ts'))\n          .forEach(file => this.compilation !.analyzeSync(file));\n    }\n\n    // Since there is no .d.ts transformation API, .d.ts files are transformed during write.\n    const writeFile: ts.WriteFileCallback =\n        (fileName: string, data: string, writeByteOrderMark: boolean,\n         onError: ((message: string) => void) | undefined,\n         sourceFiles: ReadonlyArray<ts.SourceFile>) => {\n          if (fileName.endsWith('.d.ts')) {\n            data = sourceFiles.reduce(\n                (data, sf) => this.compilation !.transformedDtsFor(sf.fileName, data, fileName),\n                data);\n          }\n          this.host.writeFile(fileName, data, writeByteOrderMark, onError, sourceFiles);\n        };\n\n\n    // Run the emit, including a custom transformer that will downlevel the Ivy decorators in code.\n    const emitResult = emitCallback({\n      program: this.tsProgram,\n      host: this.host,\n      options: this.options,\n      emitOnlyDtsFiles: false, writeFile,\n      customTransformers: {\n        before: [ivyTransformFactory(this.compilation !, this.reflector, this.coreImportsFrom)],\n      },\n    });\n    return emitResult;\n  }\n\n  private makeCompilation(): IvyCompilation {\n    const checker = this.tsProgram.getTypeChecker();\n    const scopeRegistry = new SelectorScopeRegistry(checker, this.reflector);\n\n    // Set up the IvyCompilation, which manages state for the Ivy transformer.\n    const handlers = [\n      new ComponentDecoratorHandler(\n          checker, this.reflector, scopeRegistry, this.isCore, this.resourceLoader),\n      new DirectiveDecoratorHandler(checker, this.reflector, scopeRegistry, this.isCore),\n      new InjectableDecoratorHandler(this.reflector, this.isCore),\n      new NgModuleDecoratorHandler(checker, this.reflector, scopeRegistry, this.isCore),\n      new PipeDecoratorHandler(checker, this.reflector, scopeRegistry, this.isCore),\n    ];\n\n    return new IvyCompilation(handlers, checker, this.reflector, this.coreImportsFrom);\n  }\n\n  private get reflector(): TypeScriptReflectionHost {\n    if (this._reflector === undefined) {\n      this._reflector = new TypeScriptReflectionHost(this.tsProgram.getTypeChecker());\n    }\n    return this._reflector;\n  }\n\n  private get coreImportsFrom(): ts.SourceFile|null {\n    if (this._coreImportsFrom === undefined) {\n      this._coreImportsFrom = this.isCore && getR3SymbolsFile(this.tsProgram) || null;\n    }\n    return this._coreImportsFrom;\n  }\n\n  private get isCore(): boolean {\n    if (this._isCore === undefined) {\n      this._isCore = isAngularCorePackage(this.tsProgram);\n    }\n    return this._isCore;\n  }\n}\n\nconst defaultEmitCallback: api.TsEmitCallback =\n    ({program, targetSourceFile, writeFile, cancellationToken, emitOnlyDtsFiles,\n      customTransformers}) =>\n        program.emit(\n            targetSourceFile, writeFile, cancellationToken, emitOnlyDtsFiles, customTransformers);\n\nfunction mergeEmitResults(emitResults: ts.EmitResult[]): ts.EmitResult {\n  const diagnostics: ts.Diagnostic[] = [];\n  let emitSkipped = false;\n  const emittedFiles: string[] = [];\n  for (const er of emitResults) {\n    diagnostics.push(...er.diagnostics);\n    emitSkipped = emitSkipped || er.emitSkipped;\n    emittedFiles.push(...(er.emittedFiles || []));\n  }\n  return {diagnostics, emitSkipped, emittedFiles};\n}\n\n/**\n * Find the 'r3_symbols.ts' file in the given `Program`, or return `null` if it wasn't there.\n */\nfunction getR3SymbolsFile(program: ts.Program): ts.SourceFile|null {\n  return program.getSourceFiles().find(file => file.fileName.indexOf('r3_symbols.ts') >= 0) || null;\n}\n\n/**\n * Determine if the given `Program` is @angular/core.\n */\nfunction isAngularCorePackage(program: ts.Program): boolean {\n  // Look for its_just_angular.ts somewhere in the program.\n  const r3Symbols = getR3SymbolsFile(program);\n  if (r3Symbols === null) {\n    return false;\n  }\n\n  // Look for the constant ITS_JUST_ANGULAR in that file.\n  return r3Symbols.statements.some(stmt => {\n    // The statement must be a variable declaration statement.\n    if (!ts.isVariableStatement(stmt)) {\n      return false;\n    }\n    // It must be exported.\n    if (stmt.modifiers === undefined ||\n        !stmt.modifiers.some(mod => mod.kind === ts.SyntaxKind.ExportKeyword)) {\n      return false;\n    }\n    // It must declare ITS_JUST_ANGULAR.\n    return stmt.declarationList.declarations.some(decl => {\n      // The declaration must match the name.\n      if (!ts.isIdentifier(decl.name) || decl.name.text !== 'ITS_JUST_ANGULAR') {\n        return false;\n      }\n      // It must initialize the variable to true.\n      if (decl.initializer === undefined || decl.initializer.kind !== ts.SyntaxKind.TrueKeyword) {\n        return false;\n      }\n      // This definition matches.\n      return true;\n    });\n  });\n}\n"]}