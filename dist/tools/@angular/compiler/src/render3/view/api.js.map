{"version":3,"file":"api.js","sourceRoot":"","sources":["../../../../../../../packages/compiler/src/render3/view/api.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as o from '../../output/output_ast';\nimport {ParseSourceSpan} from '../../parse_util';\nimport * as t from '../r3_ast';\nimport {R3DependencyMetadata} from '../r3_factory';\n\n/**\n * Information needed to compile a directive for the render3 runtime.\n */\nexport interface R3DirectiveMetadata {\n  /**\n   * Name of the directive type.\n   */\n  name: string;\n\n  /**\n   * An expression representing a reference to the directive itself.\n   */\n  type: o.Expression;\n\n  /**\n   * Number of generic type parameters of the type itself.\n   */\n  typeArgumentCount: number;\n\n  /**\n   * A source span for the directive type.\n   */\n  typeSourceSpan: ParseSourceSpan;\n\n  /**\n   * Dependencies of the directive's constructor.\n   */\n  deps: R3DependencyMetadata[];\n\n  /**\n   * Unparsed selector of the directive, or `null` if there was no selector.\n   */\n  selector: string|null;\n\n  /**\n   * Information about the content queries made by the directive.\n   */\n  queries: R3QueryMetadata[];\n\n  /**\n   * Mappings indicating how the directive interacts with its host element (host bindings,\n   * listeners, etc).\n   */\n  host: {\n    /**\n     * A mapping of attribute binding keys to unparsed expressions.\n     */\n    attributes: {[key: string]: string};\n\n    /**\n     * A mapping of event binding keys to unparsed expressions.\n     */\n    listeners: {[key: string]: string};\n\n    /**\n     * A mapping of property binding keys to unparsed expressions.\n     */\n    properties: {[key: string]: string};\n  };\n\n  /**\n   * Information about usage of specific lifecycle events which require special treatment in the\n   * code generator.\n   */\n  lifecycle: {\n    /**\n     * Whether the directive uses NgOnChanges.\n     */\n    usesOnChanges: boolean;\n  };\n\n  /**\n   * A mapping of input field names to the property names.\n   */\n  inputs: {[field: string]: string};\n\n  /**\n   * A mapping of output field names to the property names.\n   */\n  outputs: {[field: string]: string};\n\n  /**\n   * Whether or not the component or directive inherits from another class\n   */\n  usesInheritance: boolean;\n}\n\n/**\n * Information needed to compile a component for the render3 runtime.\n */\nexport interface R3ComponentMetadata extends R3DirectiveMetadata {\n  /**\n   * Information about the component's template.\n   */\n  template: {\n    /**\n     * Parsed nodes of the template.\n     */\n    nodes: t.Node[];\n\n    /**\n     * Whether the template includes <ng-content> tags.\n     */\n    hasNgContent: boolean;\n\n    /**\n     * Selectors found in the <ng-content> tags in the template.\n     */\n    ngContentSelectors: string[];\n  };\n\n  /**\n   * Information about the view queries made by the component.\n   */\n  viewQueries: R3QueryMetadata[];\n\n  /**\n   * A map of pipe names to an expression referencing the pipe type which are in the scope of the\n   * compilation.\n   */\n  pipes: Map<string, o.Expression>;\n\n  /**\n   * A map of directive selectors to an expression referencing the directive type which are in the\n   * scope of the compilation.\n   */\n  directives: Map<string, o.Expression>;\n}\n\n/**\n * Information needed to compile a query (view or content).\n */\nexport interface R3QueryMetadata {\n  /**\n   * Name of the property on the class to update with query results.\n   */\n  propertyName: string;\n\n  /**\n   * Whether to read only the first matching result, or an array of results.\n   */\n  first: boolean;\n\n  /**\n   * Either an expression representing a type for the query predicate, or a set of string selectors.\n   */\n  predicate: o.Expression|string[];\n\n  /**\n   * Whether to include only direct children or all descendants.\n   */\n  descendants: boolean;\n\n  /**\n   * An expression representing a type to read from each matched node, or null if the node itself\n   * is to be returned.\n   */\n  read: o.Expression|null;\n}\n\n/**\n * Output of render3 directive compilation.\n */\nexport interface R3DirectiveDef {\n  expression: o.Expression;\n  type: o.Type;\n}\n\n/**\n * Output of render3 component compilation.\n */\nexport interface R3ComponentDef {\n  expression: o.Expression;\n  type: o.Type;\n}\n"]}