{"version":3,"file":"schema_registry_mock.js","sourceRoot":"","sources":["../../../../../../packages/compiler/testing/src/schema_registry_mock.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EAAwB,IAAI,EAAC,MAAM,mBAAmB,CAAC;AAE9D,IAAA;IACE,4BACW,oBACA,iBACA,kBAAmD,iBAAgC,EACnF;QAHA,uBAAkB,GAAlB,kBAAkB;QAClB,oBAAe,GAAf,eAAe;QACf,qBAAgB,GAAhB,gBAAgB;QAAmC,sBAAiB,GAAjB,iBAAiB,CAAe;QACnF,sBAAiB,GAAjB,iBAAiB;KAAmB;;;;;;;IAE/C,wCAAW;;;;;;IAAX,UAAY,OAAe,EAAE,QAAgB,EAAE,OAA8B;;QAC3E,IAAM,KAAK,GAAG,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;QAChD,OAAO,KAAK,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;KACxC;;;;;;IAED,uCAAU;;;;;IAAV,UAAW,OAAe,EAAE,WAAkC;;QAC5D,IAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,CAAC;QAC3D,OAAO,KAAK,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;KACxC;;;;IAED,iDAAoB;;;IAApB,cAAmC,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,EAAE;;;;;;;IAE/E,4CAAe;;;;;;IAAf,UAAgB,QAAgB,EAAE,QAAgB,EAAE,WAAoB;QACtE,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;KAClC;;;;;IAED,8CAAiB;;;;IAAjB,UAAkB,QAAgB,IAAY,OAAO,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,IAAI,QAAQ,CAAC,EAAE;;;;IAElG,2DAA8B;;;IAA9B,cAA2C,OAAO,cAAc,CAAC,EAAE;;;;;IAEnE,6CAAgB;;;;IAAhB,UAAiB,IAAY;QAC3B,IAAI,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE;YAC7C,OAAO,EAAC,KAAK,EAAE,IAAI,EAAE,GAAG,EAAE,0BAAwB,IAAI,yCAAsC,EAAC,CAAC;SAC/F;aAAM;YACL,OAAO,EAAC,KAAK,EAAE,KAAK,EAAC,CAAC;SACvB;KACF;;;;;IAED,8CAAiB;;;;IAAjB,UAAkB,IAAY;QAC5B,IAAI,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE;YAC7C,OAAO;gBACL,KAAK,EAAE,IAAI;gBACX,GAAG,EAAE,2BAAyB,IAAI,yCAAsC;aACzE,CAAC;SACH;aAAM;YACL,OAAO,EAAC,KAAK,EAAE,KAAK,EAAC,CAAC;SACvB;KACF;;;;;IAED,4DAA+B;;;;IAA/B,UAAgC,QAAgB,IAAY,OAAO,QAAQ,CAAC,EAAE;;;;;;;IAC9E,yDAA4B;;;;;;IAA5B,UAA6B,aAAqB,EAAE,gBAAwB,EAAE,GAAkB;QAE9F,OAAO,EAAC,KAAK,qBAAE,IAAI,EAAE,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,EAAE,EAAC,CAAC;KAC/C;6BA5DH;IA6DC,CAAA;AAnDD,8BAmDC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ElementSchemaRegistry, core} from '@angular/compiler';\n\nexport class MockSchemaRegistry implements ElementSchemaRegistry {\n  constructor(\n      public existingProperties: {[key: string]: boolean},\n      public attrPropMapping: {[key: string]: string},\n      public existingElements: {[key: string]: boolean}, public invalidProperties: Array<string>,\n      public invalidAttributes: Array<string>) {}\n\n  hasProperty(tagName: string, property: string, schemas: core.SchemaMetadata[]): boolean {\n    const value = this.existingProperties[property];\n    return value === void 0 ? true : value;\n  }\n\n  hasElement(tagName: string, schemaMetas: core.SchemaMetadata[]): boolean {\n    const value = this.existingElements[tagName.toLowerCase()];\n    return value === void 0 ? true : value;\n  }\n\n  allKnownElementNames(): string[] { return Object.keys(this.existingElements); }\n\n  securityContext(selector: string, property: string, isAttribute: boolean): core.SecurityContext {\n    return core.SecurityContext.NONE;\n  }\n\n  getMappedPropName(attrName: string): string { return this.attrPropMapping[attrName] || attrName; }\n\n  getDefaultComponentElementName(): string { return 'ng-component'; }\n\n  validateProperty(name: string): {error: boolean, msg?: string} {\n    if (this.invalidProperties.indexOf(name) > -1) {\n      return {error: true, msg: `Binding to property '${name}' is disallowed for security reasons`};\n    } else {\n      return {error: false};\n    }\n  }\n\n  validateAttribute(name: string): {error: boolean, msg?: string} {\n    if (this.invalidAttributes.indexOf(name) > -1) {\n      return {\n        error: true,\n        msg: `Binding to attribute '${name}' is disallowed for security reasons`\n      };\n    } else {\n      return {error: false};\n    }\n  }\n\n  normalizeAnimationStyleProperty(propName: string): string { return propName; }\n  normalizeAnimationStyleValue(camelCaseProp: string, userProvidedProp: string, val: string|number):\n      {error: string, value: string} {\n    return {error: null !, value: val.toString()};\n  }\n}\n"]}