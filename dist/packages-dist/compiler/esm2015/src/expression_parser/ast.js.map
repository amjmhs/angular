{"version":3,"file":"ast.js","sourceRoot":"","sources":["../../../../../packages/compiler/src/expression_parser/ast.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {SecurityContext} from '../core';\nimport {ParseSourceSpan} from '../parse_util';\n\nexport class ParserError {\n  public message: string;\n  constructor(\n      message: string, public input: string, public errLocation: string, public ctxLocation?: any) {\n    this.message = `Parser Error: ${message} ${errLocation} [${input}] in ${ctxLocation}`;\n  }\n}\n\nexport class ParseSpan {\n  constructor(public start: number, public end: number) {}\n}\n\nexport class AST {\n  constructor(public span: ParseSpan) {}\n  visit(visitor: AstVisitor, context: any = null): any { return null; }\n  toString(): string { return 'AST'; }\n}\n\n/**\n * Represents a quoted expression of the form:\n *\n * quote = prefix `:` uninterpretedExpression\n * prefix = identifier\n * uninterpretedExpression = arbitrary string\n *\n * A quoted expression is meant to be pre-processed by an AST transformer that\n * converts it into another AST that no longer contains quoted expressions.\n * It is meant to allow third-party developers to extend Angular template\n * expression language. The `uninterpretedExpression` part of the quote is\n * therefore not interpreted by the Angular's own expression parser.\n */\nexport class Quote extends AST {\n  constructor(\n      span: ParseSpan, public prefix: string, public uninterpretedExpression: string,\n      public location: any) {\n    super(span);\n  }\n  visit(visitor: AstVisitor, context: any = null): any { return visitor.visitQuote(this, context); }\n  toString(): string { return 'Quote'; }\n}\n\nexport class EmptyExpr extends AST {\n  visit(visitor: AstVisitor, context: any = null) {\n    // do nothing\n  }\n}\n\nexport class ImplicitReceiver extends AST {\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitImplicitReceiver(this, context);\n  }\n}\n\n/**\n * Multiple expressions separated by a semicolon.\n */\nexport class Chain extends AST {\n  constructor(span: ParseSpan, public expressions: any[]) { super(span); }\n  visit(visitor: AstVisitor, context: any = null): any { return visitor.visitChain(this, context); }\n}\n\nexport class Conditional extends AST {\n  constructor(span: ParseSpan, public condition: AST, public trueExp: AST, public falseExp: AST) {\n    super(span);\n  }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitConditional(this, context);\n  }\n}\n\nexport class PropertyRead extends AST {\n  constructor(span: ParseSpan, public receiver: AST, public name: string) { super(span); }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitPropertyRead(this, context);\n  }\n}\n\nexport class PropertyWrite extends AST {\n  constructor(span: ParseSpan, public receiver: AST, public name: string, public value: AST) {\n    super(span);\n  }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitPropertyWrite(this, context);\n  }\n}\n\nexport class SafePropertyRead extends AST {\n  constructor(span: ParseSpan, public receiver: AST, public name: string) { super(span); }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitSafePropertyRead(this, context);\n  }\n}\n\nexport class KeyedRead extends AST {\n  constructor(span: ParseSpan, public obj: AST, public key: AST) { super(span); }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitKeyedRead(this, context);\n  }\n}\n\nexport class KeyedWrite extends AST {\n  constructor(span: ParseSpan, public obj: AST, public key: AST, public value: AST) { super(span); }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitKeyedWrite(this, context);\n  }\n}\n\nexport class BindingPipe extends AST {\n  constructor(span: ParseSpan, public exp: AST, public name: string, public args: any[]) {\n    super(span);\n  }\n  visit(visitor: AstVisitor, context: any = null): any { return visitor.visitPipe(this, context); }\n}\n\nexport class LiteralPrimitive extends AST {\n  constructor(span: ParseSpan, public value: any) { super(span); }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitLiteralPrimitive(this, context);\n  }\n}\n\nexport class LiteralArray extends AST {\n  constructor(span: ParseSpan, public expressions: any[]) { super(span); }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitLiteralArray(this, context);\n  }\n}\n\nexport type LiteralMapKey = {\n  key: string; quoted: boolean;\n};\n\nexport class LiteralMap extends AST {\n  constructor(span: ParseSpan, public keys: LiteralMapKey[], public values: any[]) { super(span); }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitLiteralMap(this, context);\n  }\n}\n\nexport class Interpolation extends AST {\n  constructor(span: ParseSpan, public strings: any[], public expressions: any[]) { super(span); }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitInterpolation(this, context);\n  }\n}\n\nexport class Binary extends AST {\n  constructor(span: ParseSpan, public operation: string, public left: AST, public right: AST) {\n    super(span);\n  }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitBinary(this, context);\n  }\n}\n\nexport class PrefixNot extends AST {\n  constructor(span: ParseSpan, public expression: AST) { super(span); }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitPrefixNot(this, context);\n  }\n}\n\nexport class NonNullAssert extends AST {\n  constructor(span: ParseSpan, public expression: AST) { super(span); }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitNonNullAssert(this, context);\n  }\n}\n\nexport class MethodCall extends AST {\n  constructor(span: ParseSpan, public receiver: AST, public name: string, public args: any[]) {\n    super(span);\n  }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitMethodCall(this, context);\n  }\n}\n\nexport class SafeMethodCall extends AST {\n  constructor(span: ParseSpan, public receiver: AST, public name: string, public args: any[]) {\n    super(span);\n  }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitSafeMethodCall(this, context);\n  }\n}\n\nexport class FunctionCall extends AST {\n  constructor(span: ParseSpan, public target: AST|null, public args: any[]) { super(span); }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitFunctionCall(this, context);\n  }\n}\n\nexport class ASTWithSource extends AST {\n  constructor(\n      public ast: AST, public source: string|null, public location: string,\n      public errors: ParserError[]) {\n    super(new ParseSpan(0, source == null ? 0 : source.length));\n  }\n  visit(visitor: AstVisitor, context: any = null): any { return this.ast.visit(visitor, context); }\n  toString(): string { return `${this.source} in ${this.location}`; }\n}\n\nexport class TemplateBinding {\n  constructor(\n      public span: ParseSpan, public key: string, public keyIsVar: boolean, public name: string,\n      public expression: ASTWithSource|null) {}\n}\n\nexport interface AstVisitor {\n  visitBinary(ast: Binary, context: any): any;\n  visitChain(ast: Chain, context: any): any;\n  visitConditional(ast: Conditional, context: any): any;\n  visitFunctionCall(ast: FunctionCall, context: any): any;\n  visitImplicitReceiver(ast: ImplicitReceiver, context: any): any;\n  visitInterpolation(ast: Interpolation, context: any): any;\n  visitKeyedRead(ast: KeyedRead, context: any): any;\n  visitKeyedWrite(ast: KeyedWrite, context: any): any;\n  visitLiteralArray(ast: LiteralArray, context: any): any;\n  visitLiteralMap(ast: LiteralMap, context: any): any;\n  visitLiteralPrimitive(ast: LiteralPrimitive, context: any): any;\n  visitMethodCall(ast: MethodCall, context: any): any;\n  visitPipe(ast: BindingPipe, context: any): any;\n  visitPrefixNot(ast: PrefixNot, context: any): any;\n  visitNonNullAssert(ast: NonNullAssert, context: any): any;\n  visitPropertyRead(ast: PropertyRead, context: any): any;\n  visitPropertyWrite(ast: PropertyWrite, context: any): any;\n  visitQuote(ast: Quote, context: any): any;\n  visitSafeMethodCall(ast: SafeMethodCall, context: any): any;\n  visitSafePropertyRead(ast: SafePropertyRead, context: any): any;\n  visit?(ast: AST, context?: any): any;\n}\n\nexport class NullAstVisitor implements AstVisitor {\n  visitBinary(ast: Binary, context: any): any {}\n  visitChain(ast: Chain, context: any): any {}\n  visitConditional(ast: Conditional, context: any): any {}\n  visitFunctionCall(ast: FunctionCall, context: any): any {}\n  visitImplicitReceiver(ast: ImplicitReceiver, context: any): any {}\n  visitInterpolation(ast: Interpolation, context: any): any {}\n  visitKeyedRead(ast: KeyedRead, context: any): any {}\n  visitKeyedWrite(ast: KeyedWrite, context: any): any {}\n  visitLiteralArray(ast: LiteralArray, context: any): any {}\n  visitLiteralMap(ast: LiteralMap, context: any): any {}\n  visitLiteralPrimitive(ast: LiteralPrimitive, context: any): any {}\n  visitMethodCall(ast: MethodCall, context: any): any {}\n  visitPipe(ast: BindingPipe, context: any): any {}\n  visitPrefixNot(ast: PrefixNot, context: any): any {}\n  visitNonNullAssert(ast: NonNullAssert, context: any): any {}\n  visitPropertyRead(ast: PropertyRead, context: any): any {}\n  visitPropertyWrite(ast: PropertyWrite, context: any): any {}\n  visitQuote(ast: Quote, context: any): any {}\n  visitSafeMethodCall(ast: SafeMethodCall, context: any): any {}\n  visitSafePropertyRead(ast: SafePropertyRead, context: any): any {}\n}\n\nexport class RecursiveAstVisitor implements AstVisitor {\n  visitBinary(ast: Binary, context: any): any {\n    ast.left.visit(this);\n    ast.right.visit(this);\n    return null;\n  }\n  visitChain(ast: Chain, context: any): any { return this.visitAll(ast.expressions, context); }\n  visitConditional(ast: Conditional, context: any): any {\n    ast.condition.visit(this);\n    ast.trueExp.visit(this);\n    ast.falseExp.visit(this);\n    return null;\n  }\n  visitPipe(ast: BindingPipe, context: any): any {\n    ast.exp.visit(this);\n    this.visitAll(ast.args, context);\n    return null;\n  }\n  visitFunctionCall(ast: FunctionCall, context: any): any {\n    ast.target !.visit(this);\n    this.visitAll(ast.args, context);\n    return null;\n  }\n  visitImplicitReceiver(ast: ImplicitReceiver, context: any): any { return null; }\n  visitInterpolation(ast: Interpolation, context: any): any {\n    return this.visitAll(ast.expressions, context);\n  }\n  visitKeyedRead(ast: KeyedRead, context: any): any {\n    ast.obj.visit(this);\n    ast.key.visit(this);\n    return null;\n  }\n  visitKeyedWrite(ast: KeyedWrite, context: any): any {\n    ast.obj.visit(this);\n    ast.key.visit(this);\n    ast.value.visit(this);\n    return null;\n  }\n  visitLiteralArray(ast: LiteralArray, context: any): any {\n    return this.visitAll(ast.expressions, context);\n  }\n  visitLiteralMap(ast: LiteralMap, context: any): any { return this.visitAll(ast.values, context); }\n  visitLiteralPrimitive(ast: LiteralPrimitive, context: any): any { return null; }\n  visitMethodCall(ast: MethodCall, context: any): any {\n    ast.receiver.visit(this);\n    return this.visitAll(ast.args, context);\n  }\n  visitPrefixNot(ast: PrefixNot, context: any): any {\n    ast.expression.visit(this);\n    return null;\n  }\n  visitNonNullAssert(ast: NonNullAssert, context: any): any {\n    ast.expression.visit(this);\n    return null;\n  }\n  visitPropertyRead(ast: PropertyRead, context: any): any {\n    ast.receiver.visit(this);\n    return null;\n  }\n  visitPropertyWrite(ast: PropertyWrite, context: any): any {\n    ast.receiver.visit(this);\n    ast.value.visit(this);\n    return null;\n  }\n  visitSafePropertyRead(ast: SafePropertyRead, context: any): any {\n    ast.receiver.visit(this);\n    return null;\n  }\n  visitSafeMethodCall(ast: SafeMethodCall, context: any): any {\n    ast.receiver.visit(this);\n    return this.visitAll(ast.args, context);\n  }\n  visitAll(asts: AST[], context: any): any {\n    asts.forEach(ast => ast.visit(this, context));\n    return null;\n  }\n  visitQuote(ast: Quote, context: any): any { return null; }\n}\n\nexport class AstTransformer implements AstVisitor {\n  visitImplicitReceiver(ast: ImplicitReceiver, context: any): AST { return ast; }\n\n  visitInterpolation(ast: Interpolation, context: any): AST {\n    return new Interpolation(ast.span, ast.strings, this.visitAll(ast.expressions));\n  }\n\n  visitLiteralPrimitive(ast: LiteralPrimitive, context: any): AST {\n    return new LiteralPrimitive(ast.span, ast.value);\n  }\n\n  visitPropertyRead(ast: PropertyRead, context: any): AST {\n    return new PropertyRead(ast.span, ast.receiver.visit(this), ast.name);\n  }\n\n  visitPropertyWrite(ast: PropertyWrite, context: any): AST {\n    return new PropertyWrite(ast.span, ast.receiver.visit(this), ast.name, ast.value.visit(this));\n  }\n\n  visitSafePropertyRead(ast: SafePropertyRead, context: any): AST {\n    return new SafePropertyRead(ast.span, ast.receiver.visit(this), ast.name);\n  }\n\n  visitMethodCall(ast: MethodCall, context: any): AST {\n    return new MethodCall(ast.span, ast.receiver.visit(this), ast.name, this.visitAll(ast.args));\n  }\n\n  visitSafeMethodCall(ast: SafeMethodCall, context: any): AST {\n    return new SafeMethodCall(\n        ast.span, ast.receiver.visit(this), ast.name, this.visitAll(ast.args));\n  }\n\n  visitFunctionCall(ast: FunctionCall, context: any): AST {\n    return new FunctionCall(ast.span, ast.target !.visit(this), this.visitAll(ast.args));\n  }\n\n  visitLiteralArray(ast: LiteralArray, context: any): AST {\n    return new LiteralArray(ast.span, this.visitAll(ast.expressions));\n  }\n\n  visitLiteralMap(ast: LiteralMap, context: any): AST {\n    return new LiteralMap(ast.span, ast.keys, this.visitAll(ast.values));\n  }\n\n  visitBinary(ast: Binary, context: any): AST {\n    return new Binary(ast.span, ast.operation, ast.left.visit(this), ast.right.visit(this));\n  }\n\n  visitPrefixNot(ast: PrefixNot, context: any): AST {\n    return new PrefixNot(ast.span, ast.expression.visit(this));\n  }\n\n  visitNonNullAssert(ast: NonNullAssert, context: any): AST {\n    return new NonNullAssert(ast.span, ast.expression.visit(this));\n  }\n\n  visitConditional(ast: Conditional, context: any): AST {\n    return new Conditional(\n        ast.span, ast.condition.visit(this), ast.trueExp.visit(this), ast.falseExp.visit(this));\n  }\n\n  visitPipe(ast: BindingPipe, context: any): AST {\n    return new BindingPipe(ast.span, ast.exp.visit(this), ast.name, this.visitAll(ast.args));\n  }\n\n  visitKeyedRead(ast: KeyedRead, context: any): AST {\n    return new KeyedRead(ast.span, ast.obj.visit(this), ast.key.visit(this));\n  }\n\n  visitKeyedWrite(ast: KeyedWrite, context: any): AST {\n    return new KeyedWrite(\n        ast.span, ast.obj.visit(this), ast.key.visit(this), ast.value.visit(this));\n  }\n\n  visitAll(asts: any[]): any[] {\n    const res = new Array(asts.length);\n    for (let i = 0; i < asts.length; ++i) {\n      res[i] = asts[i].visit(this);\n    }\n    return res;\n  }\n\n  visitChain(ast: Chain, context: any): AST {\n    return new Chain(ast.span, this.visitAll(ast.expressions));\n  }\n\n  visitQuote(ast: Quote, context: any): AST {\n    return new Quote(ast.span, ast.prefix, ast.uninterpretedExpression, ast.location);\n  }\n}\n\n// A transformer that only creates new nodes if the transformer makes a change or\n// a change is made a child node.\nexport class AstMemoryEfficientTransformer implements AstVisitor {\n  visitImplicitReceiver(ast: ImplicitReceiver, context: any): AST { return ast; }\n\n  visitInterpolation(ast: Interpolation, context: any): Interpolation {\n    const expressions = this.visitAll(ast.expressions);\n    if (expressions !== ast.expressions)\n      return new Interpolation(ast.span, ast.strings, expressions);\n    return ast;\n  }\n\n  visitLiteralPrimitive(ast: LiteralPrimitive, context: any): AST { return ast; }\n\n  visitPropertyRead(ast: PropertyRead, context: any): AST {\n    const receiver = ast.receiver.visit(this);\n    if (receiver !== ast.receiver) {\n      return new PropertyRead(ast.span, receiver, ast.name);\n    }\n    return ast;\n  }\n\n  visitPropertyWrite(ast: PropertyWrite, context: any): AST {\n    const receiver = ast.receiver.visit(this);\n    const value = ast.value.visit(this);\n    if (receiver !== ast.receiver || value !== ast.value) {\n      return new PropertyWrite(ast.span, receiver, ast.name, value);\n    }\n    return ast;\n  }\n\n  visitSafePropertyRead(ast: SafePropertyRead, context: any): AST {\n    const receiver = ast.receiver.visit(this);\n    if (receiver !== ast.receiver) {\n      return new SafePropertyRead(ast.span, receiver, ast.name);\n    }\n    return ast;\n  }\n\n  visitMethodCall(ast: MethodCall, context: any): AST {\n    const receiver = ast.receiver.visit(this);\n    if (receiver !== ast.receiver) {\n      return new MethodCall(ast.span, receiver, ast.name, this.visitAll(ast.args));\n    }\n    return ast;\n  }\n\n  visitSafeMethodCall(ast: SafeMethodCall, context: any): AST {\n    const receiver = ast.receiver.visit(this);\n    const args = this.visitAll(ast.args);\n    if (receiver !== ast.receiver || args !== ast.args) {\n      return new SafeMethodCall(ast.span, receiver, ast.name, args);\n    }\n    return ast;\n  }\n\n  visitFunctionCall(ast: FunctionCall, context: any): AST {\n    const target = ast.target && ast.target.visit(this);\n    const args = this.visitAll(ast.args);\n    if (target !== ast.target || args !== ast.args) {\n      return new FunctionCall(ast.span, target, args);\n    }\n    return ast;\n  }\n\n  visitLiteralArray(ast: LiteralArray, context: any): AST {\n    const expressions = this.visitAll(ast.expressions);\n    if (expressions !== ast.expressions) {\n      return new LiteralArray(ast.span, expressions);\n    }\n    return ast;\n  }\n\n  visitLiteralMap(ast: LiteralMap, context: any): AST {\n    const values = this.visitAll(ast.values);\n    if (values !== ast.values) {\n      return new LiteralMap(ast.span, ast.keys, values);\n    }\n    return ast;\n  }\n\n  visitBinary(ast: Binary, context: any): AST {\n    const left = ast.left.visit(this);\n    const right = ast.right.visit(this);\n    if (left !== ast.left || right !== ast.right) {\n      return new Binary(ast.span, ast.operation, left, right);\n    }\n    return ast;\n  }\n\n  visitPrefixNot(ast: PrefixNot, context: any): AST {\n    const expression = ast.expression.visit(this);\n    if (expression !== ast.expression) {\n      return new PrefixNot(ast.span, expression);\n    }\n    return ast;\n  }\n\n  visitNonNullAssert(ast: NonNullAssert, context: any): AST {\n    const expression = ast.expression.visit(this);\n    if (expression !== ast.expression) {\n      return new NonNullAssert(ast.span, expression);\n    }\n    return ast;\n  }\n\n  visitConditional(ast: Conditional, context: any): AST {\n    const condition = ast.condition.visit(this);\n    const trueExp = ast.trueExp.visit(this);\n    const falseExp = ast.falseExp.visit(this);\n    if (condition !== ast.condition || trueExp !== ast.trueExp || falseExp !== falseExp) {\n      return new Conditional(ast.span, condition, trueExp, falseExp);\n    }\n    return ast;\n  }\n\n  visitPipe(ast: BindingPipe, context: any): AST {\n    const exp = ast.exp.visit(this);\n    const args = this.visitAll(ast.args);\n    if (exp !== ast.exp || args !== ast.args) {\n      return new BindingPipe(ast.span, exp, ast.name, args);\n    }\n    return ast;\n  }\n\n  visitKeyedRead(ast: KeyedRead, context: any): AST {\n    const obj = ast.obj.visit(this);\n    const key = ast.key.visit(this);\n    if (obj !== ast.obj || key !== ast.key) {\n      return new KeyedRead(ast.span, obj, key);\n    }\n    return ast;\n  }\n\n  visitKeyedWrite(ast: KeyedWrite, context: any): AST {\n    const obj = ast.obj.visit(this);\n    const key = ast.key.visit(this);\n    const value = ast.value.visit(this);\n    if (obj !== ast.obj || key !== ast.key || value !== ast.value) {\n      return new KeyedWrite(ast.span, obj, key, value);\n    }\n    return ast;\n  }\n\n  visitAll(asts: any[]): any[] {\n    const res = new Array(asts.length);\n    let modified = false;\n    for (let i = 0; i < asts.length; ++i) {\n      const original = asts[i];\n      const value = original.visit(this);\n      res[i] = value;\n      modified = modified || value !== original;\n    }\n    return modified ? res : asts;\n  }\n\n  visitChain(ast: Chain, context: any): AST {\n    const expressions = this.visitAll(ast.expressions);\n    if (expressions !== ast.expressions) {\n      return new Chain(ast.span, expressions);\n    }\n    return ast;\n  }\n\n  visitQuote(ast: Quote, context: any): AST { return ast; }\n}\n\nexport function visitAstChildren(ast: AST, visitor: AstVisitor, context?: any) {\n  function visit(ast: AST) {\n    visitor.visit && visitor.visit(ast, context) || ast.visit(visitor, context);\n  }\n\n  function visitAll<T extends AST>(asts: T[]) { asts.forEach(visit); }\n\n  ast.visit({\n    visitBinary(ast) {\n      visit(ast.left);\n      visit(ast.right);\n    },\n    visitChain(ast) { visitAll(ast.expressions); },\n    visitConditional(ast) {\n      visit(ast.condition);\n      visit(ast.trueExp);\n      visit(ast.falseExp);\n    },\n    visitFunctionCall(ast) {\n      if (ast.target) {\n        visit(ast.target);\n      }\n      visitAll(ast.args);\n    },\n    visitImplicitReceiver(ast) {},\n    visitInterpolation(ast) { visitAll(ast.expressions); },\n    visitKeyedRead(ast) {\n      visit(ast.obj);\n      visit(ast.key);\n    },\n    visitKeyedWrite(ast) {\n      visit(ast.obj);\n      visit(ast.key);\n      visit(ast.obj);\n    },\n    visitLiteralArray(ast) { visitAll(ast.expressions); },\n    visitLiteralMap(ast) {},\n    visitLiteralPrimitive(ast) {},\n    visitMethodCall(ast) {\n      visit(ast.receiver);\n      visitAll(ast.args);\n    },\n    visitPipe(ast) {\n      visit(ast.exp);\n      visitAll(ast.args);\n    },\n    visitPrefixNot(ast) { visit(ast.expression); },\n    visitNonNullAssert(ast) { visit(ast.expression); },\n    visitPropertyRead(ast) { visit(ast.receiver); },\n    visitPropertyWrite(ast) {\n      visit(ast.receiver);\n      visit(ast.value);\n    },\n    visitQuote(ast) {},\n    visitSafeMethodCall(ast) {\n      visit(ast.receiver);\n      visitAll(ast.args);\n    },\n    visitSafePropertyRead(ast) { visit(ast.receiver); },\n  });\n}\n\n\n// Bindings\n\nexport class ParsedProperty {\n  public readonly isLiteral: boolean;\n  public readonly isAnimation: boolean;\n\n  constructor(\n      public name: string, public expression: ASTWithSource, public type: ParsedPropertyType,\n      public sourceSpan: ParseSourceSpan) {\n    this.isLiteral = this.type === ParsedPropertyType.LITERAL_ATTR;\n    this.isAnimation = this.type === ParsedPropertyType.ANIMATION;\n  }\n}\n\nexport enum ParsedPropertyType {\n  DEFAULT,\n  LITERAL_ATTR,\n  ANIMATION\n}\n\nexport const enum ParsedEventType {\n  // DOM or Directive event\n  Regular,\n  // Animation specific event\n  Animation,\n}\n\nexport class ParsedEvent {\n  // Regular events have a target\n  // Animation events have a phase\n  constructor(\n      public name: string, public targetOrPhase: string, public type: ParsedEventType,\n      public handler: AST, public sourceSpan: ParseSourceSpan) {}\n}\n\nexport class ParsedVariable {\n  constructor(public name: string, public value: string, public sourceSpan: ParseSourceSpan) {}\n}\n\nexport const enum BindingType {\n  // A regular binding to a property (e.g. `[property]=\"expression\"`).\n  Property,\n  // A binding to an element attribute (e.g. `[attr.name]=\"expression\"`).\n  Attribute,\n  // A binding to a CSS class (e.g. `[class.name]=\"condition\"`).\n  Class,\n  // A binding to a style rule (e.g. `[style.rule]=\"expression\"`).\n  Style,\n  // A binding to an animation reference (e.g. `[animate.key]=\"expression\"`).\n  Animation,\n}\n\nexport class BoundElementProperty {\n  constructor(\n      public name: string, public type: BindingType, public securityContext: SecurityContext,\n      public value: AST, public unit: string|null, public sourceSpan: ParseSourceSpan) {}\n}\n"]}