{"version":3,"file":"component_ref.js","sourceRoot":"","sources":["../../../../../../packages/core/src/render3/component_ref.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectorRef} from '../change_detection/change_detector_ref';\nimport {InjectionToken} from '../di/injection_token';\nimport {Injector, inject} from '../di/injector';\nimport {ComponentFactory as viewEngine_ComponentFactory, ComponentRef as viewEngine_ComponentRef} from '../linker/component_factory';\nimport {ComponentFactoryResolver as viewEngine_ComponentFactoryResolver} from '../linker/component_factory_resolver';\nimport {ElementRef} from '../linker/element_ref';\nimport {NgModuleRef as viewEngine_NgModuleRef} from '../linker/ng_module_factory';\nimport {RendererFactory2} from '../render/api';\nimport {Type} from '../type';\n\nimport {assertComponentType, assertDefined} from './assert';\nimport {LifecycleHooksFeature, createRootContext} from './component';\nimport {baseDirectiveCreate, createLNode, createLViewData, createTView, elementCreate, enterView, hostElement, initChangeDetectorIfExisting, locateHostElement, renderEmbeddedTemplate} from './instructions';\nimport {ComponentDefInternal, ComponentType, RenderFlags} from './interfaces/definition';\nimport {LElementNode, TNode, TNodeType} from './interfaces/node';\nimport {RElement, domRendererFactory3} from './interfaces/renderer';\nimport {FLAGS, INJECTOR, LViewData, LViewFlags, RootContext, TVIEW} from './interfaces/view';\nimport {ViewRef} from './view_ref';\n\nexport class ComponentFactoryResolver extends viewEngine_ComponentFactoryResolver {\n  resolveComponentFactory<T>(component: Type<T>): viewEngine_ComponentFactory<T> {\n    ngDevMode && assertComponentType(component);\n    const componentDef = (component as ComponentType<T>).ngComponentDef;\n    return new ComponentFactory(componentDef);\n  }\n}\n\nfunction toRefArray(map: {[key: string]: string}): {propName: string; templateName: string;}[] {\n  const array: {propName: string; templateName: string;}[] = [];\n  for (let nonMinified in map) {\n    if (map.hasOwnProperty(nonMinified)) {\n      const minified = map[nonMinified];\n      array.push({propName: minified, templateName: nonMinified});\n    }\n  }\n  return array;\n}\n\n/**\n * Default {@link RootContext} for all components rendered with {@link renderComponent}.\n */\nexport const ROOT_CONTEXT = new InjectionToken<RootContext>(\n    'ROOT_CONTEXT_TOKEN',\n    {providedIn: 'root', factory: () => createRootContext(inject(SCHEDULER))});\n\n/**\n * A change detection scheduler token for {@link RootContext}. This token is the default value used\n * for the default `RootContext` found in the {@link ROOT_CONTEXT} token.\n */\nexport const SCHEDULER = new InjectionToken<((fn: () => void) => void)>(\n    'SCHEDULER_TOKEN', {providedIn: 'root', factory: () => requestAnimationFrame.bind(window)});\n\n/**\n * Render3 implementation of {@link viewEngine_ComponentFactory}.\n */\nexport class ComponentFactory<T> extends viewEngine_ComponentFactory<T> {\n  selector: string;\n  componentType: Type<any>;\n  ngContentSelectors: string[];\n  get inputs(): {propName: string; templateName: string;}[] {\n    return toRefArray(this.componentDef.inputs);\n  }\n  get outputs(): {propName: string; templateName: string;}[] {\n    return toRefArray(this.componentDef.outputs);\n  }\n\n  constructor(private componentDef: ComponentDefInternal<any>) {\n    super();\n    this.componentType = componentDef.type;\n    this.selector = componentDef.selectors[0][0] as string;\n    this.ngContentSelectors = [];\n  }\n\n  create(\n      injector: Injector, projectableNodes?: any[][]|undefined, rootSelectorOrNode?: any,\n      ngModule?: viewEngine_NgModuleRef<any>|undefined): viewEngine_ComponentRef<T> {\n    const isInternalRootView = rootSelectorOrNode === undefined;\n\n    const rendererFactory =\n        ngModule ? ngModule.injector.get(RendererFactory2) : domRendererFactory3;\n    const hostNode = isInternalRootView ?\n        elementCreate(\n            this.selector, rendererFactory.createRenderer(null, this.componentDef.rendererType)) :\n        locateHostElement(rendererFactory, rootSelectorOrNode);\n\n    // The first index of the first selector is the tag name.\n    const componentTag = this.componentDef.selectors ![0] ![0] as string;\n\n    const rootContext: RootContext = ngModule && !isInternalRootView ?\n        ngModule.injector.get(ROOT_CONTEXT) :\n        createRootContext(requestAnimationFrame.bind(window));\n\n    // Create the root view. Uses empty TView and ContentTemplate.\n    const rootView: LViewData = createLViewData(\n        rendererFactory.createRenderer(hostNode, this.componentDef.rendererType),\n        createTView(-1, null, null, null, null), rootContext,\n        this.componentDef.onPush ? LViewFlags.Dirty : LViewFlags.CheckAlways);\n    rootView[INJECTOR] = ngModule && ngModule.injector || null;\n\n    // rootView is the parent when bootstrapping\n    const oldView = enterView(rootView, null !);\n\n    let component: T;\n    let elementNode: LElementNode;\n    try {\n      if (rendererFactory.begin) rendererFactory.begin();\n\n      // Create element node at index 0 in data array\n      elementNode = hostElement(componentTag, hostNode, this.componentDef);\n\n      // Create directive instance with factory() and store at index 0 in directives array\n      rootContext.components.push(\n          component = baseDirectiveCreate(0, this.componentDef.factory(), this.componentDef) as T);\n      initChangeDetectorIfExisting(elementNode.nodeInjector, component, elementNode.data !);\n\n      // TODO: should LifecycleHooksFeature and other host features be generated by the compiler and\n      // executed here?\n      // Angular 5 reference: https://stackblitz.com/edit/lifecycle-hooks-vcref\n      LifecycleHooksFeature(component, this.componentDef);\n\n      // Transform the arrays of native nodes into a LNode structure that can be consumed by the\n      // projection instruction. This is needed to support the reprojection of these nodes.\n      if (projectableNodes) {\n        let index = 0;\n        const projection: TNode[] = elementNode.tNode.projection = [];\n        for (let i = 0; i < projectableNodes.length; i++) {\n          const nodeList = projectableNodes[i];\n          let firstTNode: TNode|null = null;\n          let previousTNode: TNode|null = null;\n          for (let j = 0; j < nodeList.length; j++) {\n            const lNode =\n                createLNode(++index, TNodeType.Element, nodeList[j] as RElement, null, null);\n            if (previousTNode) {\n              previousTNode.next = lNode.tNode;\n            } else {\n              firstTNode = lNode.tNode;\n            }\n            previousTNode = lNode.tNode;\n          }\n          projection.push(firstTNode !);\n        }\n      }\n\n      // Execute the template in creation mode only, and then turn off the CreationMode flag\n      renderEmbeddedTemplate(elementNode, elementNode.data ![TVIEW], component, RenderFlags.Create);\n      elementNode.data ![FLAGS] &= ~LViewFlags.CreationMode;\n    } finally {\n      enterView(oldView, null);\n      if (rendererFactory.end) rendererFactory.end();\n    }\n\n    const componentRef =\n        new ComponentRef(this.componentType, component, rootView, injector, hostNode !);\n    if (isInternalRootView) {\n      // The host element of the internal root view is attached to the component's host view node\n      componentRef.hostView._lViewNode !.tNode.child = elementNode.tNode;\n    }\n    return componentRef;\n  }\n}\n\n/**\n * Represents an instance of a Component created via a {@link ComponentFactory}.\n *\n * `ComponentRef` provides access to the Component Instance as well other objects related to this\n * Component Instance and allows you to destroy the Component Instance via the {@link #destroy}\n * method.\n *\n */\nexport class ComponentRef<T> extends viewEngine_ComponentRef<T> {\n  destroyCbs: (() => void)[]|null = [];\n  location: ElementRef<any>;\n  injector: Injector;\n  instance: T;\n  hostView: ViewRef<T>;\n  changeDetectorRef: ChangeDetectorRef;\n  componentType: Type<T>;\n\n  constructor(\n      componentType: Type<T>, instance: T, rootView: LViewData, injector: Injector,\n      hostNode: RElement) {\n    super();\n    this.instance = instance;\n    /* TODO(jasonaden): This is incomplete, to be adjusted in follow-up PR. Notes from Kara:When\n     * ViewRef.detectChanges is called from ApplicationRef.tick, it will call detectChanges at the\n     * component instance level. I suspect this means that lifecycle hooks and host bindings on the\n     * given component won't work (as these are always called at the level above a component).\n     *\n     * In render2, ViewRef.detectChanges uses the root view instance for view checks, not the\n     * component instance. So passing in the root view (1 level above the component) is sufficient.\n     * We might  want to think about creating a fake component for the top level? Or overwrite\n     * detectChanges with a function that calls tickRootContext? */\n    this.hostView = this.changeDetectorRef = new ViewRef(rootView, instance);\n    this.hostView._lViewNode = createLNode(-1, TNodeType.View, null, null, null, rootView);\n    this.injector = injector;\n    this.location = new ElementRef(hostNode);\n    this.componentType = componentType;\n  }\n\n  destroy(): void {\n    ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n    this.destroyCbs !.forEach(fn => fn());\n    this.destroyCbs = null;\n  }\n  onDestroy(callback: () => void): void {\n    ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n    this.destroyCbs !.push(callback);\n  }\n}\n"]}