{"version":3,"file":"pure_function.js","sourceRoot":"","sources":["../../../../../packages/core/src/render3/pure_function.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertReservedSlotInitialized, bindingUpdated, bindingUpdated2, bindingUpdated4, checkAndUpdateBinding, consumeBinding, getCreationMode, moveBindingIndexToReservedSlot, restoreBindingIndex} from './instructions';\n\n\n\n/**\n * If the value hasn't been saved, calls the pure function to store and return the\n * value. If it has been saved, returns the saved value.\n *\n * @param pureFn Function that returns a value\n * @param slotOffset the offset in the reserved slot space {@link reserveSlots}\n * @param thisArg Optional calling context of pureFn\n * @returns value\n */\nexport function pureFunction0<T>(slotOffset: number, pureFn: () => T, thisArg?: any): T {\n  ngDevMode && assertReservedSlotInitialized(slotOffset, 1);\n  const index = moveBindingIndexToReservedSlot(slotOffset);\n  const value = getCreationMode() ?\n      checkAndUpdateBinding(thisArg ? pureFn.call(thisArg) : pureFn()) :\n      consumeBinding();\n  restoreBindingIndex(index);\n  return value;\n}\n\n/**\n * If the value of the provided exp has changed, calls the pure function to return\n * an updated value. Or if the value has not changed, returns cached value.\n *\n * @param slotOffset the offset in the reserved slot space {@link reserveSlots}\n * @param pureFn Function that returns an updated value\n * @param exp Updated expression value\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport function pureFunction1(\n    slotOffset: number, pureFn: (v: any) => any, exp: any, thisArg?: any): any {\n  ngDevMode && assertReservedSlotInitialized(slotOffset, 2);\n  const index = moveBindingIndexToReservedSlot(slotOffset);\n  const value = bindingUpdated(exp) ?\n      checkAndUpdateBinding(thisArg ? pureFn.call(thisArg, exp) : pureFn(exp)) :\n      consumeBinding();\n  restoreBindingIndex(index);\n  return value;\n}\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset in the reserved slot space {@link reserveSlots}\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport function pureFunction2(\n    slotOffset: number, pureFn: (v1: any, v2: any) => any, exp1: any, exp2: any,\n    thisArg?: any): any {\n  ngDevMode && assertReservedSlotInitialized(slotOffset, 3);\n  const index = moveBindingIndexToReservedSlot(slotOffset);\n  const value = bindingUpdated2(exp1, exp2) ?\n      checkAndUpdateBinding(thisArg ? pureFn.call(thisArg, exp1, exp2) : pureFn(exp1, exp2)) :\n      consumeBinding();\n  restoreBindingIndex(index);\n  return value;\n}\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset in the reserved slot space {@link reserveSlots}\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport function pureFunction3(\n    slotOffset: number, pureFn: (v1: any, v2: any, v3: any) => any, exp1: any, exp2: any, exp3: any,\n    thisArg?: any): any {\n  ngDevMode && assertReservedSlotInitialized(slotOffset, 4);\n  const index = moveBindingIndexToReservedSlot(slotOffset);\n  const different = bindingUpdated2(exp1, exp2);\n  const value = bindingUpdated(exp3) || different ?\n      checkAndUpdateBinding(\n          thisArg ? pureFn.call(thisArg, exp1, exp2, exp3) : pureFn(exp1, exp2, exp3)) :\n      consumeBinding();\n  restoreBindingIndex(index);\n  return value;\n}\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset in the reserved slot space {@link reserveSlots}\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport function pureFunction4(\n    slotOffset: number, pureFn: (v1: any, v2: any, v3: any, v4: any) => any, exp1: any, exp2: any,\n    exp3: any, exp4: any, thisArg?: any): any {\n  ngDevMode && assertReservedSlotInitialized(slotOffset, 5);\n  const index = moveBindingIndexToReservedSlot(slotOffset);\n  const value = bindingUpdated4(exp1, exp2, exp3, exp4) ?\n      checkAndUpdateBinding(\n          thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4) : pureFn(exp1, exp2, exp3, exp4)) :\n      consumeBinding();\n  restoreBindingIndex(index);\n  return value;\n}\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset in the reserved slot space {@link reserveSlots}\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport function pureFunction5(\n    slotOffset: number, pureFn: (v1: any, v2: any, v3: any, v4: any, v5: any) => any, exp1: any,\n    exp2: any, exp3: any, exp4: any, exp5: any, thisArg?: any): any {\n  ngDevMode && assertReservedSlotInitialized(slotOffset, 6);\n  const index = moveBindingIndexToReservedSlot(slotOffset);\n  const different = bindingUpdated4(exp1, exp2, exp3, exp4);\n  const value = bindingUpdated(exp5) || different ?\n      checkAndUpdateBinding(\n          thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5) :\n                    pureFn(exp1, exp2, exp3, exp4, exp5)) :\n      consumeBinding();\n  restoreBindingIndex(index);\n  return value;\n}\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset in the reserved slot space {@link reserveSlots}\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport function pureFunction6(\n    slotOffset: number, pureFn: (v1: any, v2: any, v3: any, v4: any, v5: any, v6: any) => any,\n    exp1: any, exp2: any, exp3: any, exp4: any, exp5: any, exp6: any, thisArg?: any): any {\n  ngDevMode && assertReservedSlotInitialized(slotOffset, 7);\n  const index = moveBindingIndexToReservedSlot(slotOffset);\n  const different = bindingUpdated4(exp1, exp2, exp3, exp4);\n  const value = bindingUpdated2(exp5, exp6) || different ?\n      checkAndUpdateBinding(\n          thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6) :\n                    pureFn(exp1, exp2, exp3, exp4, exp5, exp6)) :\n      consumeBinding();\n  restoreBindingIndex(index);\n  return value;\n}\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset in the reserved slot space {@link reserveSlots}\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param exp7\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport function pureFunction7(\n    slotOffset: number,\n    pureFn: (v1: any, v2: any, v3: any, v4: any, v5: any, v6: any, v7: any) => any, exp1: any,\n    exp2: any, exp3: any, exp4: any, exp5: any, exp6: any, exp7: any, thisArg?: any): any {\n  ngDevMode && assertReservedSlotInitialized(slotOffset, 8);\n  const index = moveBindingIndexToReservedSlot(slotOffset);\n  let different = bindingUpdated4(exp1, exp2, exp3, exp4);\n  different = bindingUpdated2(exp5, exp6) || different;\n  const value = bindingUpdated(exp7) || different ?\n      checkAndUpdateBinding(\n          thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7) :\n                    pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7)) :\n      consumeBinding();\n  restoreBindingIndex(index);\n  return value;\n}\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset in the reserved slot space {@link reserveSlots}\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param exp7\n * @param exp8\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport function pureFunction8(\n    slotOffset: number,\n    pureFn: (v1: any, v2: any, v3: any, v4: any, v5: any, v6: any, v7: any, v8: any) => any,\n    exp1: any, exp2: any, exp3: any, exp4: any, exp5: any, exp6: any, exp7: any, exp8: any,\n    thisArg?: any): any {\n  ngDevMode && assertReservedSlotInitialized(slotOffset, 9);\n  const index = moveBindingIndexToReservedSlot(slotOffset);\n  const different = bindingUpdated4(exp1, exp2, exp3, exp4);\n  const value = bindingUpdated4(exp5, exp6, exp7, exp8) || different ?\n      checkAndUpdateBinding(\n          thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8) :\n                    pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8)) :\n      consumeBinding();\n  restoreBindingIndex(index);\n  return value;\n}\n\n/**\n * pureFunction instruction that can support any number of bindings.\n *\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset in the reserved slot space {@link reserveSlots}\n * @param pureFn A pure function that takes binding values and builds an object or array\n * containing those values.\n * @param exps An array of binding values\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport function pureFunctionV(\n    slotOffset: number, pureFn: (...v: any[]) => any, exps: any[], thisArg?: any): any {\n  ngDevMode && assertReservedSlotInitialized(slotOffset, exps.length + 1);\n  const index = moveBindingIndexToReservedSlot(slotOffset);\n\n  let different = false;\n  for (let i = 0; i < exps.length; i++) {\n    bindingUpdated(exps[i]) && (different = true);\n  }\n  const value = different ? checkAndUpdateBinding(pureFn.apply(thisArg, exps)) : consumeBinding();\n  restoreBindingIndex(index);\n  return value;\n}\n"]}