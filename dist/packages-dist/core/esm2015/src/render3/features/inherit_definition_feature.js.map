{"version":3,"file":"inherit_definition_feature.js","sourceRoot":"","sources":["../../../../../../packages/core/src/render3/features/inherit_definition_feature.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '../../type';\nimport {ComponentDefInternal, ComponentType, DirectiveDefFeature, DirectiveDefInternal} from '../interfaces/definition';\n\n\n/**\n * Sets properties on a target object from a source object, but only if\n * the property doesn't already exist on the target object.\n * @param target The target to set properties on\n * @param source The source of the property keys and values to set\n */\nfunction fillProperties(target: {[key: string]: string}, source: {[key: string]: string}) {\n  for (const key in source) {\n    if (source.hasOwnProperty(key) && !target.hasOwnProperty(key)) {\n      target[key] = source[key];\n    }\n  }\n}\n/**\n * Determines if a definition is a {@link ComponentDefInternal} or a {@link DirectiveDefInternal}\n * @param definition The definition to examine\n */\nfunction isComponentDef<T>(definition: ComponentDefInternal<T>| DirectiveDefInternal<T>):\n    definition is ComponentDefInternal<T> {\n  const def = definition as ComponentDefInternal<T>;\n  return typeof def.template === 'function';\n}\n\nfunction getSuperType(type: Type<any>): Type<any>&\n    {ngComponentDef?: ComponentDefInternal<any>, ngDirectiveDef?: DirectiveDefInternal<any>} {\n  return Object.getPrototypeOf(type.prototype).constructor;\n}\n\n/**\n * Merges the definition from a super class to a sub class.\n * @param definition The definition that is a SubClass of another directive of component\n */\nexport function InheritDefinitionFeature(\n    definition: DirectiveDefInternal<any>| ComponentDefInternal<any>): void {\n  let superType = getSuperType(definition.type);\n  let superDef: DirectiveDefInternal<any>|ComponentDefInternal<any>|undefined = undefined;\n\n  while (superType && !superDef) {\n    if (isComponentDef(definition)) {\n      superDef = superType.ngComponentDef || superType.ngDirectiveDef;\n    } else {\n      if (superType.ngComponentDef) {\n        throw new Error('Directives cannot inherit Components');\n      }\n      superDef = superType.ngDirectiveDef;\n    }\n\n    if (superDef) {\n      // Merge inputs and outputs\n      fillProperties(definition.inputs, superDef.inputs);\n      fillProperties(definition.declaredInputs, superDef.declaredInputs);\n      fillProperties(definition.outputs, superDef.outputs);\n\n      // Merge hostBindings\n      const prevHostBindings = definition.hostBindings;\n      const superHostBindings = superDef.hostBindings;\n      if (superHostBindings) {\n        if (prevHostBindings) {\n          definition.hostBindings = (directiveIndex: number, elementIndex: number) => {\n            superHostBindings(directiveIndex, elementIndex);\n            prevHostBindings(directiveIndex, elementIndex);\n          };\n        } else {\n          definition.hostBindings = superHostBindings;\n        }\n      }\n\n      // Inherit hooks\n      // Assume super class inheritance feature has already run.\n      definition.afterContentChecked =\n          definition.afterContentChecked || superDef.afterContentChecked;\n      definition.afterContentInit = definition.afterContentInit || superDef.afterContentInit;\n      definition.afterViewChecked = definition.afterViewChecked || superDef.afterViewChecked;\n      definition.afterViewInit = definition.afterViewInit || superDef.afterViewInit;\n      definition.doCheck = definition.doCheck || superDef.doCheck;\n      definition.onDestroy = definition.onDestroy || superDef.onDestroy;\n      definition.onInit = definition.onInit || superDef.onInit;\n\n      // Run parent features\n      const features = superDef.features;\n      if (features) {\n        for (const feature of features) {\n          if (feature && feature !== InheritDefinitionFeature) {\n            (feature as DirectiveDefFeature)(definition);\n          }\n        }\n      }\n    } else {\n      // Even if we don't have a definition, check the type for the hooks and use those if need be\n      const superPrototype = superType.prototype;\n\n      if (superPrototype) {\n        definition.afterContentChecked =\n            definition.afterContentChecked || superPrototype.afterContentChecked;\n        definition.afterContentInit =\n            definition.afterContentInit || superPrototype.afterContentInit;\n        definition.afterViewChecked =\n            definition.afterViewChecked || superPrototype.afterViewChecked;\n        definition.afterViewInit = definition.afterViewInit || superPrototype.afterViewInit;\n        definition.doCheck = definition.doCheck || superPrototype.doCheck;\n        definition.onDestroy = definition.onDestroy || superPrototype.onDestroy;\n        definition.onInit = definition.onInit || superPrototype.onInit;\n      }\n    }\n\n    superType = Object.getPrototypeOf(superType);\n  }\n}\n"]}