{"version":3,"file":"template_ast.js","sourceRoot":"","sources":["../../../../../../packages/compiler/src/template_parser/template_ast.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AstPath} from '../ast_path';\nimport {CompileDirectiveSummary, CompileProviderMetadata, CompileTokenMetadata} from '../compile_metadata';\nimport {SecurityContext} from '../core';\nimport {AST, BindingType, BoundElementProperty, ParsedEvent, ParsedEventType, ParsedVariable} from '../expression_parser/ast';\nimport {LifecycleHooks} from '../lifecycle_reflector';\nimport {ParseSourceSpan} from '../parse_util';\n\n\n\n/**\n * An Abstract Syntax Tree node representing part of a parsed Angular template.\n */\nexport interface TemplateAst {\n  /**\n   * The source span from which this node was parsed.\n   */\n  sourceSpan: ParseSourceSpan;\n\n  /**\n   * Visit this node and possibly transform it.\n   */\n  visit(visitor: TemplateAstVisitor, context: any): any;\n}\n\n/**\n * A segment of text within the template.\n */\nexport class TextAst implements TemplateAst {\n  constructor(\n      public value: string, public ngContentIndex: number, public sourceSpan: ParseSourceSpan) {}\n  visit(visitor: TemplateAstVisitor, context: any): any { return visitor.visitText(this, context); }\n}\n\n/**\n * A bound expression within the text of a template.\n */\nexport class BoundTextAst implements TemplateAst {\n  constructor(\n      public value: AST, public ngContentIndex: number, public sourceSpan: ParseSourceSpan) {}\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitBoundText(this, context);\n  }\n}\n\n/**\n * A plain attribute on an element.\n */\nexport class AttrAst implements TemplateAst {\n  constructor(public name: string, public value: string, public sourceSpan: ParseSourceSpan) {}\n  visit(visitor: TemplateAstVisitor, context: any): any { return visitor.visitAttr(this, context); }\n}\n\nexport const enum PropertyBindingType {\n  // A normal binding to a property (e.g. `[property]=\"expression\"`).\n  Property,\n  // A binding to an element attribute (e.g. `[attr.name]=\"expression\"`).\n  Attribute,\n  // A binding to a CSS class (e.g. `[class.name]=\"condition\"`).\n  Class,\n  // A binding to a style rule (e.g. `[style.rule]=\"expression\"`).\n  Style,\n  // A binding to an animation reference (e.g. `[animate.key]=\"expression\"`).\n  Animation,\n}\n\nconst BoundPropertyMapping = {\n  [BindingType.Animation]: PropertyBindingType.Animation,\n  [BindingType.Attribute]: PropertyBindingType.Attribute,\n  [BindingType.Class]: PropertyBindingType.Class,\n  [BindingType.Property]: PropertyBindingType.Property,\n  [BindingType.Style]: PropertyBindingType.Style,\n};\n\n/**\n * A binding for an element property (e.g. `[property]=\"expression\"`) or an animation trigger (e.g.\n * `[@trigger]=\"stateExp\"`)\n */\nexport class BoundElementPropertyAst implements TemplateAst {\n  readonly isAnimation: boolean;\n\n  constructor(\n      public name: string, public type: PropertyBindingType,\n      public securityContext: SecurityContext, public value: AST, public unit: string|null,\n      public sourceSpan: ParseSourceSpan) {\n    this.isAnimation = this.type === PropertyBindingType.Animation;\n  }\n\n  static fromBoundProperty(prop: BoundElementProperty) {\n    const type = BoundPropertyMapping[prop.type];\n    return new BoundElementPropertyAst(\n        prop.name, type, prop.securityContext, prop.value, prop.unit, prop.sourceSpan);\n  }\n\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitElementProperty(this, context);\n  }\n}\n\n/**\n * A binding for an element event (e.g. `(event)=\"handler()\"`) or an animation trigger event (e.g.\n * `(@trigger.phase)=\"callback($event)\"`).\n */\nexport class BoundEventAst implements TemplateAst {\n  readonly fullName: string;\n  readonly isAnimation: boolean;\n\n  constructor(\n      public name: string, public target: string|null, public phase: string|null,\n      public handler: AST, public sourceSpan: ParseSourceSpan) {\n    this.fullName = BoundEventAst.calcFullName(this.name, this.target, this.phase);\n    this.isAnimation = !!this.phase;\n  }\n\n  static calcFullName(name: string, target: string|null, phase: string|null): string {\n    if (target) {\n      return `${target}:${name}`;\n    }\n    if (phase) {\n      return `@${name}.${phase}`;\n    }\n\n    return name;\n  }\n\n  static fromParsedEvent(event: ParsedEvent) {\n    const target: string|null = event.type === ParsedEventType.Regular ? event.targetOrPhase : null;\n    const phase: string|null =\n        event.type === ParsedEventType.Animation ? event.targetOrPhase : null;\n    return new BoundEventAst(event.name, target, phase, event.handler, event.sourceSpan);\n  }\n\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitEvent(this, context);\n  }\n}\n\n/**\n * A reference declaration on an element (e.g. `let someName=\"expression\"`).\n */\nexport class ReferenceAst implements TemplateAst {\n  constructor(\n      public name: string, public value: CompileTokenMetadata, public originalValue: string,\n      public sourceSpan: ParseSourceSpan) {}\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitReference(this, context);\n  }\n}\n\n/**\n * A variable declaration on a <ng-template> (e.g. `var-someName=\"someLocalName\"`).\n */\nexport class VariableAst implements TemplateAst {\n  constructor(public name: string, public value: string, public sourceSpan: ParseSourceSpan) {}\n\n  static fromParsedVariable(v: ParsedVariable) {\n    return new VariableAst(v.name, v.value, v.sourceSpan);\n  }\n\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitVariable(this, context);\n  }\n}\n\n/**\n * An element declaration in a template.\n */\nexport class ElementAst implements TemplateAst {\n  constructor(\n      public name: string, public attrs: AttrAst[], public inputs: BoundElementPropertyAst[],\n      public outputs: BoundEventAst[], public references: ReferenceAst[],\n      public directives: DirectiveAst[], public providers: ProviderAst[],\n      public hasViewContainer: boolean, public queryMatches: QueryMatch[],\n      public children: TemplateAst[], public ngContentIndex: number|null,\n      public sourceSpan: ParseSourceSpan, public endSourceSpan: ParseSourceSpan|null) {}\n\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitElement(this, context);\n  }\n}\n\n/**\n * A `<ng-template>` element included in an Angular template.\n */\nexport class EmbeddedTemplateAst implements TemplateAst {\n  constructor(\n      public attrs: AttrAst[], public outputs: BoundEventAst[], public references: ReferenceAst[],\n      public variables: VariableAst[], public directives: DirectiveAst[],\n      public providers: ProviderAst[], public hasViewContainer: boolean,\n      public queryMatches: QueryMatch[], public children: TemplateAst[],\n      public ngContentIndex: number, public sourceSpan: ParseSourceSpan) {}\n\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitEmbeddedTemplate(this, context);\n  }\n}\n\n/**\n * A directive property with a bound value (e.g. `*ngIf=\"condition\").\n */\nexport class BoundDirectivePropertyAst implements TemplateAst {\n  constructor(\n      public directiveName: string, public templateName: string, public value: AST,\n      public sourceSpan: ParseSourceSpan) {}\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitDirectiveProperty(this, context);\n  }\n}\n\n/**\n * A directive declared on an element.\n */\nexport class DirectiveAst implements TemplateAst {\n  constructor(\n      public directive: CompileDirectiveSummary, public inputs: BoundDirectivePropertyAst[],\n      public hostProperties: BoundElementPropertyAst[], public hostEvents: BoundEventAst[],\n      public contentQueryStartId: number, public sourceSpan: ParseSourceSpan) {}\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitDirective(this, context);\n  }\n}\n\n/**\n * A provider declared on an element\n */\nexport class ProviderAst implements TemplateAst {\n  constructor(\n      public token: CompileTokenMetadata, public multiProvider: boolean, public eager: boolean,\n      public providers: CompileProviderMetadata[], public providerType: ProviderAstType,\n      public lifecycleHooks: LifecycleHooks[], public sourceSpan: ParseSourceSpan,\n      readonly isModule: boolean) {}\n\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    // No visit method in the visitor for now...\n    return null;\n  }\n}\n\nexport enum ProviderAstType {\n  PublicService,\n  PrivateService,\n  Component,\n  Directive,\n  Builtin\n}\n\n/**\n * Position where content is to be projected (instance of `<ng-content>` in a template).\n */\nexport class NgContentAst implements TemplateAst {\n  constructor(\n      public index: number, public ngContentIndex: number, public sourceSpan: ParseSourceSpan) {}\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitNgContent(this, context);\n  }\n}\n\nexport interface QueryMatch {\n  queryId: number;\n  value: CompileTokenMetadata;\n}\n\n/**\n * A visitor for {@link TemplateAst} trees that will process each node.\n */\nexport interface TemplateAstVisitor {\n  // Returning a truthy value from `visit()` will prevent `templateVisitAll()` from the call to\n  // the typed method and result returned will become the result included in `visitAll()`s\n  // result array.\n  visit?(ast: TemplateAst, context: any): any;\n\n  visitNgContent(ast: NgContentAst, context: any): any;\n  visitEmbeddedTemplate(ast: EmbeddedTemplateAst, context: any): any;\n  visitElement(ast: ElementAst, context: any): any;\n  visitReference(ast: ReferenceAst, context: any): any;\n  visitVariable(ast: VariableAst, context: any): any;\n  visitEvent(ast: BoundEventAst, context: any): any;\n  visitElementProperty(ast: BoundElementPropertyAst, context: any): any;\n  visitAttr(ast: AttrAst, context: any): any;\n  visitBoundText(ast: BoundTextAst, context: any): any;\n  visitText(ast: TextAst, context: any): any;\n  visitDirective(ast: DirectiveAst, context: any): any;\n  visitDirectiveProperty(ast: BoundDirectivePropertyAst, context: any): any;\n}\n\n/**\n * A visitor that accepts each node but doesn't do anything. It is intended to be used\n * as the base class for a visitor that is only interested in a subset of the node types.\n */\nexport class NullTemplateVisitor implements TemplateAstVisitor {\n  visitNgContent(ast: NgContentAst, context: any): void {}\n  visitEmbeddedTemplate(ast: EmbeddedTemplateAst, context: any): void {}\n  visitElement(ast: ElementAst, context: any): void {}\n  visitReference(ast: ReferenceAst, context: any): void {}\n  visitVariable(ast: VariableAst, context: any): void {}\n  visitEvent(ast: BoundEventAst, context: any): void {}\n  visitElementProperty(ast: BoundElementPropertyAst, context: any): void {}\n  visitAttr(ast: AttrAst, context: any): void {}\n  visitBoundText(ast: BoundTextAst, context: any): void {}\n  visitText(ast: TextAst, context: any): void {}\n  visitDirective(ast: DirectiveAst, context: any): void {}\n  visitDirectiveProperty(ast: BoundDirectivePropertyAst, context: any): void {}\n}\n\n/**\n * Base class that can be used to build a visitor that visits each node\n * in an template ast recursively.\n */\nexport class RecursiveTemplateAstVisitor extends NullTemplateVisitor implements TemplateAstVisitor {\n  constructor() { super(); }\n\n  // Nodes with children\n  visitEmbeddedTemplate(ast: EmbeddedTemplateAst, context: any): any {\n    return this.visitChildren(context, visit => {\n      visit(ast.attrs);\n      visit(ast.references);\n      visit(ast.variables);\n      visit(ast.directives);\n      visit(ast.providers);\n      visit(ast.children);\n    });\n  }\n\n  visitElement(ast: ElementAst, context: any): any {\n    return this.visitChildren(context, visit => {\n      visit(ast.attrs);\n      visit(ast.inputs);\n      visit(ast.outputs);\n      visit(ast.references);\n      visit(ast.directives);\n      visit(ast.providers);\n      visit(ast.children);\n    });\n  }\n\n  visitDirective(ast: DirectiveAst, context: any): any {\n    return this.visitChildren(context, visit => {\n      visit(ast.inputs);\n      visit(ast.hostProperties);\n      visit(ast.hostEvents);\n    });\n  }\n\n  protected visitChildren<T extends TemplateAst>(\n      context: any,\n      cb: (visit: (<V extends TemplateAst>(children: V[]|undefined) => void)) => void) {\n    let results: any[][] = [];\n    let t = this;\n    function visit<T extends TemplateAst>(children: T[] | undefined) {\n      if (children && children.length) results.push(templateVisitAll(t, children, context));\n    }\n    cb(visit);\n    return [].concat.apply([], results);\n  }\n}\n\n/**\n * Visit every node in a list of {@link TemplateAst}s with the given {@link TemplateAstVisitor}.\n */\nexport function templateVisitAll(\n    visitor: TemplateAstVisitor, asts: TemplateAst[], context: any = null): any[] {\n  const result: any[] = [];\n  const visit = visitor.visit ?\n      (ast: TemplateAst) => visitor.visit !(ast, context) || ast.visit(visitor, context) :\n      (ast: TemplateAst) => ast.visit(visitor, context);\n  asts.forEach(ast => {\n    const astResult = visit(ast);\n    if (astResult) {\n      result.push(astResult);\n    }\n  });\n  return result;\n}\n\nexport type TemplateAstPath = AstPath<TemplateAst>;\n"]}