{"version":3,"file":"summary_resolver.js","sourceRoot":"","sources":["../../../../../packages/compiler/src/summary_resolver.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAgBA;;;;AAAA;;;0BAhBA;IAyBC,CAAA;;;;;AATD,2BASC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAED,IAAA;;0BACuB,IAAI,GAAG,EAAuB;;;;;IAEnD,0CAAa;;;IAAb,cAA2B,OAAO,KAAK,CAAC,EAAE;;;;;IAC1C,8CAAiB;;;;IAAjB,UAAkB,QAAgB,IAAY,OAAO,QAAQ,CAAC,EAAE;;;;;IAChE,gDAAmB;;;;IAAnB,UAAoB,QAAgB,IAAY,OAAO,QAAQ,CAAC,EAAE;;;;;IAClE,2CAAc;;;;IAAd,UAAe,SAAe;QAC5B,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC;KAC/C;;;;IACD,yCAAY;;;IAAZ,cAAyB,OAAO,EAAE,CAAC,EAAE;;;;;IACrC,wCAAW;;;;IAAX,UAAY,SAAe,IAAU,OAAO,SAAS,CAAC,EAAE;;;;;IACxD,+CAAkB;;;;IAAlB,UAAmB,QAAgB,IAAI,OAAO,IAAI,CAAC,EAAE;;;;;IACrD,uCAAU;;;;IAAV,UAAW,OAAsB,IAAI,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,EAAE;6BAvCtF;IAwCC,CAAA;AAbD,8BAaC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CompileTypeSummary} from './compile_metadata';\nimport {Type} from './core';\n\nexport interface Summary<T> {\n  symbol: T;\n  metadata: any;\n  type?: CompileTypeSummary;\n}\n\nexport abstract class SummaryResolver<T> {\n  abstract isLibraryFile(fileName: string): boolean;\n  abstract toSummaryFileName(fileName: string, referringSrcFileName: string): string;\n  abstract fromSummaryFileName(fileName: string, referringLibFileName: string): string;\n  abstract resolveSummary(reference: T): Summary<T>|null;\n  abstract getSymbolsOf(filePath: string): T[]|null;\n  abstract getImportAs(reference: T): T;\n  abstract getKnownModuleName(fileName: string): string|null;\n  abstract addSummary(summary: Summary<T>): void;\n}\n\nexport class JitSummaryResolver implements SummaryResolver<Type> {\n  private _summaries = new Map<Type, Summary<Type>>();\n\n  isLibraryFile(): boolean { return false; }\n  toSummaryFileName(fileName: string): string { return fileName; }\n  fromSummaryFileName(fileName: string): string { return fileName; }\n  resolveSummary(reference: Type): Summary<Type>|null {\n    return this._summaries.get(reference) || null;\n  }\n  getSymbolsOf(): Type[] { return []; }\n  getImportAs(reference: Type): Type { return reference; }\n  getKnownModuleName(fileName: string) { return null; }\n  addSummary(summary: Summary<Type>) { this._summaries.set(summary.symbol, summary); }\n}\n"]}