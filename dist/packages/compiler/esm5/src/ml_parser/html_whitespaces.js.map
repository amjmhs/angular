{"version":3,"file":"html_whitespaces.js","sourceRoot":"","sources":["../../../../../../packages/compiler/src/ml_parser/html_whitespaces.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as html from './ast';\nimport {ParseTreeResult} from './parser';\nimport {NGSP_UNICODE} from './tags';\n\nexport const PRESERVE_WS_ATTR_NAME = 'ngPreserveWhitespaces';\n\nconst SKIP_WS_TRIM_TAGS = new Set(['pre', 'template', 'textarea', 'script', 'style']);\n\n// Equivalent to \\s with \\u00a0 (non-breaking space) excluded.\n// Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\nconst WS_CHARS = ' \\f\\n\\r\\t\\v\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff';\nconst NO_WS_REGEXP = new RegExp(`[^${WS_CHARS}]`);\nconst WS_REPLACE_REGEXP = new RegExp(`[${WS_CHARS}]{2,}`, 'g');\n\nfunction hasPreserveWhitespacesAttr(attrs: html.Attribute[]): boolean {\n  return attrs.some((attr: html.Attribute) => attr.name === PRESERVE_WS_ATTR_NAME);\n}\n\n/**\n * Angular Dart introduced &ngsp; as a placeholder for non-removable space, see:\n * https://github.com/dart-lang/angular/blob/0bb611387d29d65b5af7f9d2515ab571fd3fbee4/_tests/test/compiler/preserve_whitespace_test.dart#L25-L32\n * In Angular Dart &ngsp; is converted to the 0xE500 PUA (Private Use Areas) unicode character\n * and later on replaced by a space. We are re-implementing the same idea here.\n */\nexport function replaceNgsp(value: string): string {\n  // lexer is replacing the &ngsp; pseudo-entity with NGSP_UNICODE\n  return value.replace(new RegExp(NGSP_UNICODE, 'g'), ' ');\n}\n\n/**\n * This visitor can walk HTML parse tree and remove / trim text nodes using the following rules:\n * - consider spaces, tabs and new lines as whitespace characters;\n * - drop text nodes consisting of whitespace characters only;\n * - for all other text nodes replace consecutive whitespace characters with one space;\n * - convert &ngsp; pseudo-entity to a single space;\n *\n * Removal and trimming of whitespaces have positive performance impact (less code to generate\n * while compiling templates, faster view creation). At the same time it can be \"destructive\"\n * in some cases (whitespaces can influence layout). Because of the potential of breaking layout\n * this visitor is not activated by default in Angular 5 and people need to explicitly opt-in for\n * whitespace removal. The default option for whitespace removal will be revisited in Angular 6\n * and might be changed to \"on\" by default.\n */\nexport class WhitespaceVisitor implements html.Visitor {\n  visitElement(element: html.Element, context: any): any {\n    if (SKIP_WS_TRIM_TAGS.has(element.name) || hasPreserveWhitespacesAttr(element.attrs)) {\n      // don't descent into elements where we need to preserve whitespaces\n      // but still visit all attributes to eliminate one used as a market to preserve WS\n      return new html.Element(\n          element.name, html.visitAll(this, element.attrs), element.children, element.sourceSpan,\n          element.startSourceSpan, element.endSourceSpan);\n    }\n\n    return new html.Element(\n        element.name, element.attrs, html.visitAll(this, element.children), element.sourceSpan,\n        element.startSourceSpan, element.endSourceSpan);\n  }\n\n  visitAttribute(attribute: html.Attribute, context: any): any {\n    return attribute.name !== PRESERVE_WS_ATTR_NAME ? attribute : null;\n  }\n\n  visitText(text: html.Text, context: any): any {\n    const isNotBlank = text.value.match(NO_WS_REGEXP);\n\n    if (isNotBlank) {\n      return new html.Text(\n          replaceNgsp(text.value).replace(WS_REPLACE_REGEXP, ' '), text.sourceSpan);\n    }\n\n    return null;\n  }\n\n  visitComment(comment: html.Comment, context: any): any { return comment; }\n\n  visitExpansion(expansion: html.Expansion, context: any): any { return expansion; }\n\n  visitExpansionCase(expansionCase: html.ExpansionCase, context: any): any { return expansionCase; }\n}\n\nexport function removeWhitespaces(htmlAstWithErrors: ParseTreeResult): ParseTreeResult {\n  return new ParseTreeResult(\n      html.visitAll(new WhitespaceVisitor(), htmlAstWithErrors.rootNodes),\n      htmlAstWithErrors.errors);\n}\n"]}