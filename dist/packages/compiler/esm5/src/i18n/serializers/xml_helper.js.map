{"version":3,"file":"xml_helper.js","sourceRoot":"","sources":["../../../../../../../packages/compiler/src/i18n/serializers/xml_helper.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport interface IVisitor {\n  visitTag(tag: Tag): any;\n  visitText(text: Text): any;\n  visitDeclaration(decl: Declaration): any;\n  visitDoctype(doctype: Doctype): any;\n}\n\nclass _Visitor implements IVisitor {\n  visitTag(tag: Tag): string {\n    const strAttrs = this._serializeAttributes(tag.attrs);\n\n    if (tag.children.length == 0) {\n      return `<${tag.name}${strAttrs}/>`;\n    }\n\n    const strChildren = tag.children.map(node => node.visit(this));\n    return `<${tag.name}${strAttrs}>${strChildren.join('')}</${tag.name}>`;\n  }\n\n  visitText(text: Text): string { return text.value; }\n\n  visitDeclaration(decl: Declaration): string {\n    return `<?xml${this._serializeAttributes(decl.attrs)} ?>`;\n  }\n\n  private _serializeAttributes(attrs: {[k: string]: string}) {\n    const strAttrs = Object.keys(attrs).map((name: string) => `${name}=\"${attrs[name]}\"`).join(' ');\n    return strAttrs.length > 0 ? ' ' + strAttrs : '';\n  }\n\n  visitDoctype(doctype: Doctype): any {\n    return `<!DOCTYPE ${doctype.rootTag} [\\n${doctype.dtd}\\n]>`;\n  }\n}\n\nconst _visitor = new _Visitor();\n\nexport function serialize(nodes: Node[]): string {\n  return nodes.map((node: Node): string => node.visit(_visitor)).join('');\n}\n\nexport interface Node { visit(visitor: IVisitor): any; }\n\nexport class Declaration implements Node {\n  public attrs: {[k: string]: string} = {};\n\n  constructor(unescapedAttrs: {[k: string]: string}) {\n    Object.keys(unescapedAttrs).forEach((k: string) => {\n      this.attrs[k] = escapeXml(unescapedAttrs[k]);\n    });\n  }\n\n  visit(visitor: IVisitor): any { return visitor.visitDeclaration(this); }\n}\n\nexport class Doctype implements Node {\n  constructor(public rootTag: string, public dtd: string) {}\n\n  visit(visitor: IVisitor): any { return visitor.visitDoctype(this); }\n}\n\nexport class Tag implements Node {\n  public attrs: {[k: string]: string} = {};\n\n  constructor(\n      public name: string, unescapedAttrs: {[k: string]: string} = {},\n      public children: Node[] = []) {\n    Object.keys(unescapedAttrs).forEach((k: string) => {\n      this.attrs[k] = escapeXml(unescapedAttrs[k]);\n    });\n  }\n\n  visit(visitor: IVisitor): any { return visitor.visitTag(this); }\n}\n\nexport class Text implements Node {\n  value: string;\n  constructor(unescapedValue: string) { this.value = escapeXml(unescapedValue); }\n\n  visit(visitor: IVisitor): any { return visitor.visitText(this); }\n}\n\nexport class CR extends Text {\n  constructor(ws: number = 0) { super(`\\n${new Array(ws + 1).join(' ')}`); }\n}\n\nconst _ESCAPED_CHARS: [RegExp, string][] = [\n  [/&/g, '&amp;'],\n  [/\"/g, '&quot;'],\n  [/'/g, '&apos;'],\n  [/</g, '&lt;'],\n  [/>/g, '&gt;'],\n];\n\n// Escape `_ESCAPED_CHARS` characters in the given text with encoded entities\nexport function escapeXml(text: string): string {\n  return _ESCAPED_CHARS.reduce(\n      (text: string, entry: [RegExp, string]) => text.replace(entry[0], entry[1]), text);\n}\n"]}