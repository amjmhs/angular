{"version":3,"file":"core.js","sourceRoot":"","sources":["../../../../packages/compiler/src/core.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// Attention:\n// This file duplicates types and values from @angular/core\n// so that we are able to make @angular/compiler independent of @angular/core.\n// This is important to prevent a build cycle, as @angular/core needs to\n// be compiled with the compiler.\n\nimport {CssSelector} from './selector';\n\nexport interface Inject { token: any; }\nexport const createInject = makeMetadataFactory<Inject>('Inject', (token: any) => ({token}));\nexport const createInjectionToken = makeMetadataFactory<object>(\n    'InjectionToken', (desc: string) => ({_desc: desc, ngInjectableDef: undefined}));\n\nexport interface Attribute { attributeName?: string; }\nexport const createAttribute =\n    makeMetadataFactory<Attribute>('Attribute', (attributeName?: string) => ({attributeName}));\n\nexport interface Query {\n  descendants: boolean;\n  first: boolean;\n  read: any;\n  isViewQuery: boolean;\n  selector: any;\n}\n\nexport const createContentChildren = makeMetadataFactory<Query>(\n    'ContentChildren',\n    (selector?: any, data: any = {}) =>\n        ({selector, first: false, isViewQuery: false, descendants: false, ...data}));\nexport const createContentChild = makeMetadataFactory<Query>(\n    'ContentChild', (selector?: any, data: any = {}) =>\n                        ({selector, first: true, isViewQuery: false, descendants: true, ...data}));\nexport const createViewChildren = makeMetadataFactory<Query>(\n    'ViewChildren', (selector?: any, data: any = {}) =>\n                        ({selector, first: false, isViewQuery: true, descendants: true, ...data}));\nexport const createViewChild = makeMetadataFactory<Query>(\n    'ViewChild', (selector: any, data: any) =>\n                     ({selector, first: true, isViewQuery: true, descendants: true, ...data}));\n\nexport interface Directive {\n  selector?: string;\n  inputs?: string[];\n  outputs?: string[];\n  host?: {[key: string]: string};\n  providers?: Provider[];\n  exportAs?: string;\n  queries?: {[key: string]: any};\n  guards?: {[key: string]: any};\n}\nexport const createDirective =\n    makeMetadataFactory<Directive>('Directive', (dir: Directive = {}) => dir);\n\nexport interface Component extends Directive {\n  changeDetection?: ChangeDetectionStrategy;\n  viewProviders?: Provider[];\n  moduleId?: string;\n  templateUrl?: string;\n  template?: string;\n  styleUrls?: string[];\n  styles?: string[];\n  animations?: any[];\n  encapsulation?: ViewEncapsulation;\n  interpolation?: [string, string];\n  entryComponents?: Array<Type|any[]>;\n  preserveWhitespaces?: boolean;\n}\nexport enum ViewEncapsulation {\n  Emulated = 0,\n  Native = 1,\n  None = 2,\n  ShadowDom = 3\n}\n\nexport enum ChangeDetectionStrategy {\n  OnPush = 0,\n  Default = 1\n}\n\nexport const createComponent = makeMetadataFactory<Component>(\n    'Component', (c: Component = {}) => ({changeDetection: ChangeDetectionStrategy.Default, ...c}));\n\nexport interface Pipe {\n  name: string;\n  pure?: boolean;\n}\nexport const createPipe = makeMetadataFactory<Pipe>('Pipe', (p: Pipe) => ({pure: true, ...p}));\n\nexport interface Input { bindingPropertyName?: string; }\nexport const createInput =\n    makeMetadataFactory<Input>('Input', (bindingPropertyName?: string) => ({bindingPropertyName}));\n\nexport interface Output { bindingPropertyName?: string; }\nexport const createOutput = makeMetadataFactory<Output>(\n    'Output', (bindingPropertyName?: string) => ({bindingPropertyName}));\n\nexport interface HostBinding { hostPropertyName?: string; }\nexport const createHostBinding = makeMetadataFactory<HostBinding>(\n    'HostBinding', (hostPropertyName?: string) => ({hostPropertyName}));\n\nexport interface HostListener {\n  eventName?: string;\n  args?: string[];\n}\nexport const createHostListener = makeMetadataFactory<HostListener>(\n    'HostListener', (eventName?: string, args?: string[]) => ({eventName, args}));\n\nexport interface NgModule {\n  providers?: Provider[];\n  declarations?: Array<Type|any[]>;\n  imports?: Array<Type|ModuleWithProviders|any[]>;\n  exports?: Array<Type|any[]>;\n  entryComponents?: Array<Type|any[]>;\n  bootstrap?: Array<Type|any[]>;\n  schemas?: Array<SchemaMetadata|any[]>;\n  id?: string;\n}\nexport const createNgModule =\n    makeMetadataFactory<NgModule>('NgModule', (ngModule: NgModule) => ngModule);\n\nexport interface ModuleWithProviders {\n  ngModule: Type;\n  providers?: Provider[];\n}\nexport interface Injectable {\n  providedIn?: Type|'root'|any;\n  useClass?: Type|any;\n  useExisting?: Type|any;\n  useValue?: any;\n  useFactory?: Type|any;\n  deps?: Array<Type|any[]>;\n}\nexport const createInjectable =\n    makeMetadataFactory('Injectable', (injectable: Injectable = {}) => injectable);\nexport interface SchemaMetadata { name: string; }\n\nexport const CUSTOM_ELEMENTS_SCHEMA: SchemaMetadata = {\n  name: 'custom-elements'\n};\n\nexport const NO_ERRORS_SCHEMA: SchemaMetadata = {\n  name: 'no-errors-schema'\n};\n\nexport const createOptional = makeMetadataFactory('Optional');\nexport const createSelf = makeMetadataFactory('Self');\nexport const createSkipSelf = makeMetadataFactory('SkipSelf');\nexport const createHost = makeMetadataFactory('Host');\n\nexport interface Type extends Function { new (...args: any[]): any; }\nexport const Type = Function;\n\nexport enum SecurityContext {\n  NONE = 0,\n  HTML = 1,\n  STYLE = 2,\n  SCRIPT = 3,\n  URL = 4,\n  RESOURCE_URL = 5,\n}\n\nexport type Provider = any;\n\nexport const enum NodeFlags {\n  None = 0,\n  TypeElement = 1 << 0,\n  TypeText = 1 << 1,\n  ProjectedTemplate = 1 << 2,\n  CatRenderNode = TypeElement | TypeText,\n  TypeNgContent = 1 << 3,\n  TypePipe = 1 << 4,\n  TypePureArray = 1 << 5,\n  TypePureObject = 1 << 6,\n  TypePurePipe = 1 << 7,\n  CatPureExpression = TypePureArray | TypePureObject | TypePurePipe,\n  TypeValueProvider = 1 << 8,\n  TypeClassProvider = 1 << 9,\n  TypeFactoryProvider = 1 << 10,\n  TypeUseExistingProvider = 1 << 11,\n  LazyProvider = 1 << 12,\n  PrivateProvider = 1 << 13,\n  TypeDirective = 1 << 14,\n  Component = 1 << 15,\n  CatProviderNoDirective =\n      TypeValueProvider | TypeClassProvider | TypeFactoryProvider | TypeUseExistingProvider,\n  CatProvider = CatProviderNoDirective | TypeDirective,\n  OnInit = 1 << 16,\n  OnDestroy = 1 << 17,\n  DoCheck = 1 << 18,\n  OnChanges = 1 << 19,\n  AfterContentInit = 1 << 20,\n  AfterContentChecked = 1 << 21,\n  AfterViewInit = 1 << 22,\n  AfterViewChecked = 1 << 23,\n  EmbeddedViews = 1 << 24,\n  ComponentView = 1 << 25,\n  TypeContentQuery = 1 << 26,\n  TypeViewQuery = 1 << 27,\n  StaticQuery = 1 << 28,\n  DynamicQuery = 1 << 29,\n  TypeModuleProvider = 1 << 30,\n  CatQuery = TypeContentQuery | TypeViewQuery,\n\n  // mutually exclusive values...\n  Types = CatRenderNode | TypeNgContent | TypePipe | CatPureExpression | CatProvider | CatQuery\n}\n\nexport const enum DepFlags {\n  None = 0,\n  SkipSelf = 1 << 0,\n  Optional = 1 << 1,\n  Self = 1 << 2,\n  Value = 1 << 3,\n}\n\n/**\n * Injection flags for DI.\n */\nexport const enum InjectFlags {\n  Default = 0,\n\n  /**\n   * Specifies that an injector should retrieve a dependency from any injector until reaching the\n   * host element of the current component. (Only used with Element Injector)\n   */\n  Host = 1 << 0,\n  /** Don't descend into ancestors of the node requesting injection. */\n  Self = 1 << 1,\n  /** Skip the node that is requesting injection. */\n  SkipSelf = 1 << 2,\n  /** Inject `defaultValue` instead if token not found. */\n  Optional = 1 << 3,\n}\n\nexport const enum ArgumentType {Inline = 0, Dynamic = 1}\n\nexport const enum BindingFlags {\n  TypeElementAttribute = 1 << 0,\n  TypeElementClass = 1 << 1,\n  TypeElementStyle = 1 << 2,\n  TypeProperty = 1 << 3,\n  SyntheticProperty = 1 << 4,\n  SyntheticHostProperty = 1 << 5,\n  CatSyntheticProperty = SyntheticProperty | SyntheticHostProperty,\n\n  // mutually exclusive values...\n  Types = TypeElementAttribute | TypeElementClass | TypeElementStyle | TypeProperty\n}\n\nexport const enum QueryBindingType {First = 0, All = 1}\n\nexport const enum QueryValueType {\n  ElementRef = 0,\n  RenderElement = 1,\n  TemplateRef = 2,\n  ViewContainerRef = 3,\n  Provider = 4\n}\n\nexport const enum ViewFlags {\n  None = 0,\n  OnPush = 1 << 1,\n}\n\nexport enum MissingTranslationStrategy {\n  Error = 0,\n  Warning = 1,\n  Ignore = 2,\n}\n\nexport interface MetadataFactory<T> {\n  (...args: any[]): T;\n  isTypeOf(obj: any): obj is T;\n  ngMetadataName: string;\n}\n\nfunction makeMetadataFactory<T>(name: string, props?: (...args: any[]) => T): MetadataFactory<T> {\n  const factory: any = (...args: any[]) => {\n    const values = props ? props(...args) : {};\n    return {\n      ngMetadataName: name,\n      ...values,\n    };\n  };\n  factory.isTypeOf = (obj: any) => obj && obj.ngMetadataName === name;\n  factory.ngMetadataName = name;\n  return factory;\n}\n\nexport interface Route {\n  children?: Route[];\n  loadChildren?: string|Type|any;\n}\n\n/**\n * Flags used to generate R3-style CSS Selectors. They are pasted from\n * core/src/render3/projection.ts because they cannot be referenced directly.\n */\nexport const enum SelectorFlags {\n  /** Indicates this is the beginning of a new negative selector */\n  NOT = 0b0001,\n\n  /** Mode for matching attributes */\n  ATTRIBUTE = 0b0010,\n\n  /** Mode for matching tag names */\n  ELEMENT = 0b0100,\n\n  /** Mode for matching class names */\n  CLASS = 0b1000,\n}\n\n// These are a copy the CSS types from core/src/render3/interfaces/projection.ts\n// They are duplicated here as they cannot be directly referenced from core.\nexport type R3CssSelector = (string | SelectorFlags)[];\nexport type R3CssSelectorList = R3CssSelector[];\n\nfunction parserSelectorToSimpleSelector(selector: CssSelector): R3CssSelector {\n  const classes = selector.classNames && selector.classNames.length ?\n      [SelectorFlags.CLASS, ...selector.classNames] :\n      [];\n  const elementName = selector.element && selector.element !== '*' ? selector.element : '';\n  return [elementName, ...selector.attrs, ...classes];\n}\n\nfunction parserSelectorToNegativeSelector(selector: CssSelector): R3CssSelector {\n  const classes = selector.classNames && selector.classNames.length ?\n      [SelectorFlags.CLASS, ...selector.classNames] :\n      [];\n\n  if (selector.element) {\n    return [\n      SelectorFlags.NOT | SelectorFlags.ELEMENT, selector.element, ...selector.attrs, ...classes\n    ];\n  } else if (selector.attrs.length) {\n    return [SelectorFlags.NOT | SelectorFlags.ATTRIBUTE, ...selector.attrs, ...classes];\n  } else {\n    return selector.classNames && selector.classNames.length ?\n        [SelectorFlags.NOT | SelectorFlags.CLASS, ...selector.classNames] :\n        [];\n  }\n}\n\nfunction parserSelectorToR3Selector(selector: CssSelector): R3CssSelector {\n  const positive = parserSelectorToSimpleSelector(selector);\n\n  const negative: R3CssSelectorList = selector.notSelectors && selector.notSelectors.length ?\n      selector.notSelectors.map(notSelector => parserSelectorToNegativeSelector(notSelector)) :\n      [];\n\n  return positive.concat(...negative);\n}\n\nexport function parseSelectorToR3Selector(selector: string): R3CssSelectorList {\n  const selectors = CssSelector.parse(selector);\n  return selectors.map(parserSelectorToR3Selector);\n}\n\n// Pasted from render3/interfaces/definition since it cannot be referenced directly\n/**\n * Flags passed into template functions to determine which blocks (i.e. creation, update)\n * should be executed.\n *\n * Typically, a template runs both the creation block and the update block on initialization and\n * subsequent runs only execute the update block. However, dynamically created views require that\n * the creation block be executed separately from the update block (for backwards compat).\n */\nexport const enum RenderFlags {\n  /* Whether to run the creation block (e.g. create elements and directives) */\n  Create = 0b01,\n\n  /* Whether to run the update block (e.g. refresh bindings) */\n  Update = 0b10\n}\n\nexport const enum InitialStylingFlags {\n  VALUES_MODE = 0b1,\n}\n"]}