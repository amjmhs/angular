{"version":3,"file":"compiler_host.js","sourceRoot":"","sources":["../../../../../packages/compiler-cli/src/ngtsc/compiler_host.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;AA0BH;;GAEG;AACH;IACE,YAAoB,QAAyB;QAAzB,aAAQ,GAAR,QAAQ,CAAiB;QAC3C,IAAI,QAAQ,CAAC,8BAA8B,EAAE;YAM3C,IAAI,CAAC,8BAA8B,GAAG,CAAC,KAAe,EAAE,cAAsB,EAAE,EAAE,CAC7E,QAAQ,CAAC,8BAAsE,CAC5E,KAAK,EAAE,cAAc,CAAC,CAAC;SAChC;IACH,CAAC;IAKD,aAAa,CACT,QAAgB,EAAE,eAAgC,EAClD,OAA+C,EAC/C,yBAA6C;QAC/C,OAAO,IAAI,CAAC,QAAQ,CAAC,aAAa,CAC9B,QAAQ,EAAE,eAAe,EAAE,OAAO,EAAE,yBAAyB,CAAC,CAAC;IACrE,CAAC;IAED,qBAAqB,CAAC,OAA2B;QAC/C,OAAO,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;IACtD,CAAC;IAED,SAAS,CACL,QAAgB,EAAE,IAAY,EAAE,kBAA2B,EAC3D,OAA8C,EAC9C,WAAyC;QAC3C,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,EAAE,kBAAkB,EAAE,OAAO,EAAE,WAAW,CAAC,CAAC;IAC3F,CAAC;IAED,mBAAmB,KAAa,OAAO,IAAI,CAAC,QAAQ,CAAC,mBAAmB,EAAE,CAAC,CAAC,CAAC;IAE7E,cAAc,CAAC,IAAY,IAAc,OAAO,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAErF,oBAAoB,CAAC,QAAgB;QACnC,OAAO,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;IACtD,CAAC;IAED,yBAAyB,KAAc,OAAO,IAAI,CAAC,QAAQ,CAAC,yBAAyB,EAAE,CAAC,CAAC,CAAC;IAE1F,UAAU,KAAa,OAAO,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;IAE3D,UAAU,CAAC,QAAgB,IAAa,OAAO,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAEpF,QAAQ,CAAC,QAAgB,IAAsB,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAEzF,YAAY,CAAC,IAAY,IAAsB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC,CAAC,CAAC;IAE5F,eAAe,CAAC,IAAY,IAAmB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC,CAAC,CAAC;CAC7F;AAvDD,8CAuDC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as ts from 'typescript';\n\n/**\n * The TypeScript compiler host used by `ngtsc`.\n *\n * It's mostly identical to the native `CompilerHost`, but also includes the ability to\n * asynchronously resolve resources.\n */\nexport interface CompilerHost extends ts.CompilerHost {\n  /**\n   * Begin processing a resource file.\n   *\n   * When the returned Promise resolves, `loadResource` should be able to synchronously produce a\n   * `string` for the given file.\n   */\n  preloadResource(file: string): Promise<void>;\n\n  /**\n   * Like `readFile`, but reads the contents of a resource file which may have been pre-processed\n   * by `preloadResource`.\n   */\n  loadResource(file: string): string|undefined;\n}\n\n/**\n * Implementation of `CompilerHost` which delegates to a native TypeScript host in most cases.\n */\nexport class NgtscCompilerHost implements CompilerHost {\n  constructor(private delegate: ts.CompilerHost) {\n    if (delegate.resolveTypeReferenceDirectives) {\n      // Backward compatibility with TypeScript 2.9 and older since return\n      // type has changed from (ts.ResolvedTypeReferenceDirective | undefined)[]\n      // to ts.ResolvedTypeReferenceDirective[] in Typescript 3.0\n      type ts3ResolveTypeReferenceDirectives = (names: string[], containingFile: string) =>\n          ts.ResolvedTypeReferenceDirective[];\n      this.resolveTypeReferenceDirectives = (names: string[], containingFile: string) =>\n          (delegate.resolveTypeReferenceDirectives as ts3ResolveTypeReferenceDirectives) !(\n              names, containingFile);\n    }\n  }\n\n  resolveTypeReferenceDirectives?:\n      (names: string[], containingFile: string) => ts.ResolvedTypeReferenceDirective[];\n\n  getSourceFile(\n      fileName: string, languageVersion: ts.ScriptTarget,\n      onError?: ((message: string) => void)|undefined,\n      shouldCreateNewSourceFile?: boolean|undefined): ts.SourceFile|undefined {\n    return this.delegate.getSourceFile(\n        fileName, languageVersion, onError, shouldCreateNewSourceFile);\n  }\n\n  getDefaultLibFileName(options: ts.CompilerOptions): string {\n    return this.delegate.getDefaultLibFileName(options);\n  }\n\n  writeFile(\n      fileName: string, data: string, writeByteOrderMark: boolean,\n      onError: ((message: string) => void)|undefined,\n      sourceFiles: ReadonlyArray<ts.SourceFile>): void {\n    return this.delegate.writeFile(fileName, data, writeByteOrderMark, onError, sourceFiles);\n  }\n\n  getCurrentDirectory(): string { return this.delegate.getCurrentDirectory(); }\n\n  getDirectories(path: string): string[] { return this.delegate.getDirectories(path); }\n\n  getCanonicalFileName(fileName: string): string {\n    return this.delegate.getCanonicalFileName(fileName);\n  }\n\n  useCaseSensitiveFileNames(): boolean { return this.delegate.useCaseSensitiveFileNames(); }\n\n  getNewLine(): string { return this.delegate.getNewLine(); }\n\n  fileExists(fileName: string): boolean { return this.delegate.fileExists(fileName); }\n\n  readFile(fileName: string): string|undefined { return this.delegate.readFile(fileName); }\n\n  loadResource(file: string): string|undefined { throw new Error('Method not implemented.'); }\n\n  preloadResource(file: string): Promise<void> { throw new Error('Method not implemented.'); }\n}\n"]}