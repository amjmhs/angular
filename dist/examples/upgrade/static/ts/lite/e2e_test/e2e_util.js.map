{"version":3,"file":"e2e_util.js","sourceRoot":"","sources":["../../../../../../../packages/examples/upgrade/static/ts/lite/e2e_test/e2e_util.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;AAEH,2CAA6C;AAW7C,MAAM,YAAY,GAAG,CAAC,IAAY,EAAE,EAAE,CAClC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC;AAEvE;IACE,OAAO,CAAC,WAAW,CAAC;QAClB,SAAS,EACL,GAAG,EAAE,CAAC,CAAC;YACL,OAAO,CAAC,aAAwC;gBAC9C,MAAM,OAAO,GAAG,CAAC,QAAgB,EAAE,EAAE,CACjC,aAAe,CAAC,OAAO,CAAC,eAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;gBACxD,MAAM,MAAM,GAAG;oBACb,OAAO,EAAE,sDAAsD;oBAC/D,IAAI,EAAE,CAAC,CAAC,aAAa;wBACjB,OAAO,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,OAAO,CAA0B,CAAC;6BACnE,IAAI,CAAC,CAAC,CAAC,WAAW,EAAE,UAAU,EAAE,iBAAiB,CAAC,EAAE,EAAE;4BACrD,MAAM,IAAI,GAAG,CAAC,WAAW,KAAK,YAAY,CAAC,IAAI,YAAY,CAAC,UAAU,CAAC;gCACnE,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;4BAEnC,MAAM,UAAU,GACZ,QAAQ,WAAW,KAAK,UAAU,KAAK,iBAAiB,GAAG,CAAC;4BAChE,MAAM,CAAC,OAAO;gCACV,YAAY,UAAU,IAAI,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,qBAAqB,CAAC;4BAEtE,OAAO,IAAI,CAAC;wBACd,CAAC,CAAC;iBACX,CAAC;gBACF,OAAO,MAAM,CAAC;YAChB,CAAC;SACF,CAAC;QACF,UAAU,EAAE,GAAG,EAAE,CAAC,CAAC;YACjB,OAAO,CAAC,aAAwC,EAAE,YAAoB;gBACpE,MAAM,MAAM,GAAG;oBACb,OAAO,EAAE,sDAAsD;oBAC/D,IAAI,EAAE,CAAC,CAAC,aAAa,IAAI,aAAa,CAAC,OAAO,CAAC,eAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;wBACvF,MAAM,IAAI,GAAG,UAAU,KAAK,YAAY,CAAC;wBACzC,MAAM,CAAC,OAAO;4BACV,iBAAiB,UAAU,IAAI,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,kBAAkB,YAAY,IAAI,CAAC;wBACxF,OAAO,IAAI,CAAC;oBACd,CAAC,CAAC;iBACH,CAAC;gBACF,OAAO,MAAM,CAAC;YAChB,CAAC;SACF,CAAC;KACA,CAAC,CAAC;AACZ,CAAC;AAzCD,8CAyCC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ElementFinder, by} from 'protractor';\n\ndeclare global {\n  namespace jasmine {\n  interface Matchers<T> {\n    toBeAHero(): Promise<void>;\n    toHaveName(exectedName: string): Promise<void>;\n  }\n  }\n}\n\nconst isTitleCased = (text: string) =>\n    text.split(/\\s+/).every(word => word[0] === word[0].toUpperCase());\n\nexport function addCustomMatchers() {\n  jasmine.addMatchers({\n    toBeAHero:\n        () => ({\n          compare(actualNg1Hero: ElementFinder | undefined) {\n            const getText = (selector: string) =>\n                actualNg1Hero !.element(by.css(selector)).getText();\n            const result = {\n              message: 'Expected undefined to be an `ng1Hero` ElementFinder.',\n              pass: !!actualNg1Hero &&\n                  Promise.all(['.title', 'h2', 'p'].map(getText) as PromiseLike<string>[])\n                      .then(([actualTitle, actualName, actualDescription]) => {\n                        const pass = (actualTitle === 'Super Hero') && isTitleCased(actualName) &&\n                            (actualDescription.length > 0);\n\n                        const actualHero =\n                            `Hero(${actualTitle}, ${actualName}, ${actualDescription})`;\n                        result.message =\n                            `Expected ${actualHero}'${pass ? ' not' : ''} to be a real hero.`;\n\n                        return pass;\n                      })\n            };\n            return result;\n          }\n        }),\n        toHaveName: () => ({\n          compare(actualNg1Hero: ElementFinder | undefined, expectedName: string) {\n            const result = {\n              message: 'Expected undefined to be an `ng1Hero` ElementFinder.',\n              pass: !!actualNg1Hero && actualNg1Hero.element(by.css('h2')).getText().then(actualName => {\n                const pass = actualName === expectedName;\n                result.message =\n                    `Expected Hero(${actualName})${pass ? ' not' : ''} to have name '${expectedName}'.`;\n                return pass;\n              })\n            };\n            return result;\n          }\n        }),\n  } as any);\n}\n"]}