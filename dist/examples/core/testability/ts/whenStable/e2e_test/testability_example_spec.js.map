{"version":3,"file":"testability_example_spec.js","sourceRoot":"","sources":["../../../../../../../packages/examples/core/testability/ts/whenStable/e2e_test/testability_example_spec.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;AAEH,2CAAgD;AAChD,8DAAsE;AAEtE,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;IACnC,SAAS,CAAC,gCAAqB,CAAC,CAAC;IAEjC,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;QACnC,MAAM,GAAG,GAAG,kCAAkC,CAAC;QAE/C,EAAE,CAAC,gCAAgC,EAAE,IAAI,CAAC,EAAE;YAC1C,oBAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACjB,oBAAO,CAAC,qBAAqB,GAAG,IAAI,CAAC;YAErC,uEAAuE;YACvE,IAAI,oBAAoB,GAAG,UAAS,IAAS;gBAC3C,IAAI,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;gBACnD,IAAI,WAAW,GAAI,MAAc,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC;gBAChE,WAAW,CAAC,UAAU,CAAC,CAAC,OAAgB,EAAE,KAAU,EAAE,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YACnF,CAAC,CAAC;YAEF,oBAAO,CAAC,eAAE,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;YAEzC,oBAAO,CAAC,MAAM,CAAC,kBAAkB,CAAC,oBAAoB,CAAC,CAAC,IAAI,CAAC,CAAC,MAAa,EAAE,EAAE;gBAC7E,IAAI,WAAW,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;gBAC5B,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBACxC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;gBACjD,MAAM,CAAC,oBAAO,CAAC,eAAE,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;gBACnE,IAAI,EAAE,CAAC;YACT,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,GAAG,EAAE,GAAG,oBAAO,CAAC,qBAAqB,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7D,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {browser, by, element} from 'protractor';\nimport {verifyNoBrowserErrors} from '../../../../../_common/e2e_util';\n\ndescribe('testability example', () => {\n  afterEach(verifyNoBrowserErrors);\n\n  describe('using task tracking', () => {\n    const URL = '/core/testability/ts/whenStable/';\n\n    it('times out with a list of tasks', done => {\n      browser.get(URL);\n      browser.ignoreSynchronization = true;\n\n      // Script that runs in the browser and calls whenStable with a timeout.\n      let waitWithResultScript = function(done: any) {\n        let rootEl = document.querySelector('example-app');\n        let testability = (window as any).getAngularTestability(rootEl);\n        testability.whenStable((didWork: boolean, tasks: any) => { done(tasks); }, 1000);\n      };\n\n      element(by.css('.start-button')).click();\n\n      browser.driver.executeAsyncScript(waitWithResultScript).then((result: any[]) => {\n        let pendingTask = result[0];\n        expect(pendingTask.delay).toEqual(5000);\n        expect(pendingTask.source).toEqual('setTimeout');\n        expect(element(by.css('.status')).getText()).not.toContain('done');\n        done();\n      });\n    });\n\n    afterAll(() => { browser.ignoreSynchronization = false; });\n  });\n});\n"]}