{"version":3,"file":"injector_spec.js","sourceRoot":"","sources":["../../../../../packages/examples/core/di/ts/injector_spec.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectFlags, InjectionToken, Injector, Type, inject, ÉµsetCurrentInjector as setCurrentInjector} from '@angular/core';\n\nclass MockRootScopeInjector implements Injector {\n  constructor(readonly parent: Injector) {}\n\n  get<T>(\n      token: Type<T>|InjectionToken<T>, defaultValue?: any,\n      flags: InjectFlags = InjectFlags.Default): T {\n    if ((token as any).ngInjectableDef && (token as any).ngInjectableDef.providedIn === 'root') {\n      const old = setCurrentInjector(this);\n      try {\n        return (token as any).ngInjectableDef.factory();\n      } finally {\n        setCurrentInjector(old);\n      }\n    }\n    return this.parent.get(token, defaultValue, flags);\n  }\n}\n\n{\n  describe('injector metadata examples', () => {\n    it('works', () => {\n      // #docregion Injector\n      const injector: Injector =\n          Injector.create({providers: [{provide: 'validToken', useValue: 'Value'}]});\n      expect(injector.get('validToken')).toEqual('Value');\n      expect(() => injector.get('invalidToken')).toThrowError();\n      expect(injector.get('invalidToken', 'notFound')).toEqual('notFound');\n      // #enddocregion\n    });\n\n    it('injects injector', () => {\n      // #docregion injectInjector\n      const injector = Injector.create({providers: []});\n      expect(injector.get(Injector)).toBe(injector);\n      // #enddocregion\n    });\n\n    it('should infer type', () => {\n      // #docregion InjectionToken\n      const BASE_URL = new InjectionToken<string>('BaseUrl');\n      const injector =\n          Injector.create({providers: [{provide: BASE_URL, useValue: 'http://localhost'}]});\n      const url = injector.get(BASE_URL);\n      // here `url` is inferred to be `string` because `BASE_URL` is `InjectionToken<string>`.\n      expect(url).toBe('http://localhost');\n      // #enddocregion\n    });\n\n    it('injects a tree-shakeable InjectionToken', () => {\n      class MyDep {}\n      const injector =\n          new MockRootScopeInjector(Injector.create({providers: [{provide: MyDep, deps: []}]}));\n\n      // #docregion ShakableInjectionToken\n      class MyService {\n        constructor(readonly myDep: MyDep) {}\n      }\n\n      const MY_SERVICE_TOKEN = new InjectionToken<MyService>('Manually constructed MyService', {\n        providedIn: 'root',\n        factory: () => new MyService(inject(MyDep)),\n      });\n\n      const instance = injector.get(MY_SERVICE_TOKEN);\n      expect(instance instanceof MyService).toBeTruthy();\n      expect(instance.myDep instanceof MyDep).toBeTruthy();\n      // #enddocregion\n    });\n  });\n}\n"]}