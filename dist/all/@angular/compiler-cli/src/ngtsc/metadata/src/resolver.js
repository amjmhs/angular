"use strict";
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * resolver.ts implements partial computation of expressions, resolving expressions to static
 * values where possible and returning a `DynamicValue` signal when not.
 */
var compiler_1 = require("@angular/compiler");
var path = require("path");
var ts = require("typescript");
var TS_DTS_EXTENSION = /(\.d)?\.ts$/;
/**
 * Represents a value which cannot be determined statically.
 *
 * Use `isDynamicValue` to determine whether a `ResolvedValue` is a `DynamicValue`.
 */
var DynamicValue = /** @class */ (function () {
    function DynamicValue() {
        /**
         * This is needed so the "is DynamicValue" assertion of `isDynamicValue` actually has meaning.
         *
         * Otherwise, "is DynamicValue" is akin to "is {}" which doesn't trigger narrowing.
         */
        this._isDynamic = true;
    }
    return DynamicValue;
}());
exports.DynamicValue = DynamicValue;
/**
 * An internal flyweight for `DynamicValue`. Eventually the dynamic value will carry information
 * on the location of the node that could not be statically computed.
 */
var DYNAMIC_VALUE = new DynamicValue();
/**
 * Used to test whether a `ResolvedValue` is a `DynamicValue`.
 */
function isDynamicValue(value) {
    return value === DYNAMIC_VALUE;
}
exports.isDynamicValue = isDynamicValue;
/**
 * A reference to a `ts.Node`.
 *
 * For example, if an expression evaluates to a function or class definition, it will be returned
 * as a `Reference` (assuming references are allowed in evaluation).
 */
var Reference = /** @class */ (function () {
    function Reference(node) {
        this.node = node;
    }
    return Reference;
}());
exports.Reference = Reference;
/**
 * A reference to a node only, without any ability to get an `Expression` representing that node.
 *
 * This is used for returning references to things like method declarations, which are not directly
 * referenceable.
 */
var NodeReference = /** @class */ (function (_super) {
    __extends(NodeReference, _super);
    function NodeReference(node, moduleName) {
        var _this = _super.call(this, node) || this;
        _this.moduleName = moduleName;
        return _this;
    }
    NodeReference.prototype.toExpression = function (context) { return null; };
    NodeReference.prototype.withIdentifier = function (identifier) { return this; };
    return NodeReference;
}(Reference));
exports.NodeReference = NodeReference;
/**
 * A reference to a node which has a `ts.Identifier` and can be resolved to an `Expression`.
 *
 * Imports generated by `ResolvedReference`s are always relative.
 */
var ResolvedReference = /** @class */ (function (_super) {
    __extends(ResolvedReference, _super);
    function ResolvedReference(node, identifier) {
        var _this = _super.call(this, node) || this;
        _this.identifier = identifier;
        _this.expressable = true;
        return _this;
    }
    ResolvedReference.prototype.toExpression = function (context) {
        if (ts.getOriginalNode(context) === ts.getOriginalNode(this.identifier).getSourceFile()) {
            return new compiler_1.WrappedNodeExpr(this.identifier);
        }
        else {
            // Relative import from context -> this.node.getSourceFile().
            // TODO(alxhub): investigate the impact of multiple source roots here.
            // TODO(alxhub): investigate the need to map such paths via the Host for proper g3 support.
            var relative = path.posix.relative(path.dirname(context.fileName), this.node.getSourceFile().fileName)
                .replace(TS_DTS_EXTENSION, '');
            // path.relative() does not include the leading './'.
            if (!relative.startsWith('.')) {
                relative = "./" + relative;
            }
            // path.relative() returns the empty string (converted to './' above) if the two paths are the
            // same.
            if (relative === './') {
                // Same file after all.
                return new compiler_1.WrappedNodeExpr(this.identifier);
            }
            else {
                return new compiler_1.ExternalExpr(new compiler_1.ExternalReference(relative, this.identifier.text));
            }
        }
    };
    ResolvedReference.prototype.withIdentifier = function (identifier) {
        return new ResolvedReference(this.node, identifier);
    };
    return ResolvedReference;
}(Reference));
exports.ResolvedReference = ResolvedReference;
/**
 * A reference to a node which has a `ts.Identifer` and an expected absolute module name.
 *
 * An `AbsoluteReference` can be resolved to an `Expression`, and if that expression is an import
 * the module specifier will be an absolute module name, not a relative path.
 */
var AbsoluteReference = /** @class */ (function (_super) {
    __extends(AbsoluteReference, _super);
    function AbsoluteReference(node, identifier, moduleName, symbolName) {
        var _this = _super.call(this, node) || this;
        _this.identifier = identifier;
        _this.moduleName = moduleName;
        _this.symbolName = symbolName;
        _this.expressable = true;
        return _this;
    }
    AbsoluteReference.prototype.toExpression = function (context) {
        if (ts.getOriginalNode(context) === ts.getOriginalNode(this.identifier).getSourceFile()) {
            return new compiler_1.WrappedNodeExpr(this.identifier);
        }
        else {
            return new compiler_1.ExternalExpr(new compiler_1.ExternalReference(this.moduleName, this.symbolName));
        }
    };
    AbsoluteReference.prototype.withIdentifier = function (identifier) {
        return new AbsoluteReference(this.node, identifier, this.moduleName, this.symbolName);
    };
    return AbsoluteReference;
}(Reference));
exports.AbsoluteReference = AbsoluteReference;
/**
 * Statically resolve the given `ts.Expression` into a `ResolvedValue`.
 *
 * @param node the expression to statically resolve if possible
 * @param checker a `ts.TypeChecker` used to understand the expression
 * @param foreignFunctionResolver a function which will be used whenever a "foreign function" is
 * encountered. A foreign function is a function which has no body - usually the result of calling
 * a function declared in another library's .d.ts file. In these cases, the foreignFunctionResolver
 * will be called with the function's declaration, and can optionally return a `ts.Expression`
 * (possibly extracted from the foreign function's type signature) which will be used as the result
 * of the call.
 * @returns a `ResolvedValue` representing the resolved value
 */
function staticallyResolve(node, host, checker, foreignFunctionResolver) {
    return new StaticInterpreter(host, checker).visit(node, {
        absoluteModuleName: null,
        scope: new Map(), foreignFunctionResolver: foreignFunctionResolver,
    });
}
exports.staticallyResolve = staticallyResolve;
function literalBinaryOp(op) {
    return { op: op, literal: true };
}
function referenceBinaryOp(op) {
    return { op: op, literal: false };
}
var BINARY_OPERATORS = new Map([
    [ts.SyntaxKind.PlusToken, literalBinaryOp(function (a, b) { return a + b; })],
    [ts.SyntaxKind.MinusToken, literalBinaryOp(function (a, b) { return a - b; })],
    [ts.SyntaxKind.AsteriskToken, literalBinaryOp(function (a, b) { return a * b; })],
    [ts.SyntaxKind.SlashToken, literalBinaryOp(function (a, b) { return a / b; })],
    [ts.SyntaxKind.PercentToken, literalBinaryOp(function (a, b) { return a % b; })],
    [ts.SyntaxKind.AmpersandToken, literalBinaryOp(function (a, b) { return a & b; })],
    [ts.SyntaxKind.BarToken, literalBinaryOp(function (a, b) { return a | b; })],
    [ts.SyntaxKind.CaretToken, literalBinaryOp(function (a, b) { return a ^ b; })],
    [ts.SyntaxKind.LessThanToken, literalBinaryOp(function (a, b) { return a < b; })],
    [ts.SyntaxKind.LessThanEqualsToken, literalBinaryOp(function (a, b) { return a <= b; })],
    [ts.SyntaxKind.GreaterThanToken, literalBinaryOp(function (a, b) { return a > b; })],
    [ts.SyntaxKind.GreaterThanEqualsToken, literalBinaryOp(function (a, b) { return a >= b; })],
    [ts.SyntaxKind.LessThanLessThanToken, literalBinaryOp(function (a, b) { return a << b; })],
    [ts.SyntaxKind.GreaterThanGreaterThanToken, literalBinaryOp(function (a, b) { return a >> b; })],
    [ts.SyntaxKind.GreaterThanGreaterThanGreaterThanToken, literalBinaryOp(function (a, b) { return a >>> b; })],
    [ts.SyntaxKind.AsteriskAsteriskToken, literalBinaryOp(function (a, b) { return Math.pow(a, b); })],
    [ts.SyntaxKind.AmpersandAmpersandToken, referenceBinaryOp(function (a, b) { return a && b; })],
    [ts.SyntaxKind.BarBarToken, referenceBinaryOp(function (a, b) { return a || b; })]
]);
var UNARY_OPERATORS = new Map([
    [ts.SyntaxKind.TildeToken, function (a) { return ~a; }], [ts.SyntaxKind.MinusToken, function (a) { return -a; }],
    [ts.SyntaxKind.PlusToken, function (a) { return +a; }], [ts.SyntaxKind.ExclamationToken, function (a) { return !a; }]
]);
var StaticInterpreter = /** @class */ (function () {
    function StaticInterpreter(host, checker) {
        this.host = host;
        this.checker = checker;
    }
    StaticInterpreter.prototype.visit = function (node, context) {
        return this.visitExpression(node, context);
    };
    StaticInterpreter.prototype.visitExpression = function (node, context) {
        if (node.kind === ts.SyntaxKind.TrueKeyword) {
            return true;
        }
        else if (node.kind === ts.SyntaxKind.FalseKeyword) {
            return false;
        }
        else if (ts.isStringLiteral(node)) {
            return node.text;
        }
        else if (ts.isNoSubstitutionTemplateLiteral(node)) {
            return node.text;
        }
        else if (ts.isTemplateExpression(node)) {
            return this.visitTemplateExpression(node, context);
        }
        else if (ts.isNumericLiteral(node)) {
            return parseFloat(node.text);
        }
        else if (ts.isObjectLiteralExpression(node)) {
            return this.visitObjectLiteralExpression(node, context);
        }
        else if (ts.isIdentifier(node)) {
            return this.visitIdentifier(node, context);
        }
        else if (ts.isPropertyAccessExpression(node)) {
            return this.visitPropertyAccessExpression(node, context);
        }
        else if (ts.isCallExpression(node)) {
            return this.visitCallExpression(node, context);
        }
        else if (ts.isConditionalExpression(node)) {
            return this.visitConditionalExpression(node, context);
        }
        else if (ts.isPrefixUnaryExpression(node)) {
            return this.visitPrefixUnaryExpression(node, context);
        }
        else if (ts.isBinaryExpression(node)) {
            return this.visitBinaryExpression(node, context);
        }
        else if (ts.isArrayLiteralExpression(node)) {
            return this.visitArrayLiteralExpression(node, context);
        }
        else if (ts.isParenthesizedExpression(node)) {
            return this.visitParenthesizedExpression(node, context);
        }
        else if (ts.isElementAccessExpression(node)) {
            return this.visitElementAccessExpression(node, context);
        }
        else if (ts.isAsExpression(node)) {
            return this.visitExpression(node.expression, context);
        }
        else if (ts.isNonNullExpression(node)) {
            return this.visitExpression(node.expression, context);
        }
        else if (isPossibleClassDeclaration(node) && this.host.isClass(node)) {
            return this.visitDeclaration(node, context);
        }
        else {
            return DYNAMIC_VALUE;
        }
    };
    StaticInterpreter.prototype.visitArrayLiteralExpression = function (node, context) {
        var array = [];
        for (var i = 0; i < node.elements.length; i++) {
            var element = node.elements[i];
            if (ts.isSpreadElement(element)) {
                var spread = this.visitExpression(element.expression, context);
                if (isDynamicValue(spread)) {
                    return DYNAMIC_VALUE;
                }
                if (!Array.isArray(spread)) {
                    throw new Error("Unexpected value in spread expression: " + spread);
                }
                array.push.apply(array, spread);
            }
            else {
                var result = this.visitExpression(element, context);
                if (isDynamicValue(result)) {
                    return DYNAMIC_VALUE;
                }
                array.push(result);
            }
        }
        return array;
    };
    StaticInterpreter.prototype.visitObjectLiteralExpression = function (node, context) {
        var map = new Map();
        for (var i = 0; i < node.properties.length; i++) {
            var property = node.properties[i];
            if (ts.isPropertyAssignment(property)) {
                var name_1 = this.stringNameFromPropertyName(property.name, context);
                // Check whether the name can be determined statically.
                if (name_1 === undefined) {
                    return DYNAMIC_VALUE;
                }
                map.set(name_1, this.visitExpression(property.initializer, context));
            }
            else if (ts.isShorthandPropertyAssignment(property)) {
                var symbol = this.checker.getShorthandAssignmentValueSymbol(property);
                if (symbol === undefined || symbol.valueDeclaration === undefined) {
                    return DYNAMIC_VALUE;
                }
                map.set(property.name.text, this.visitDeclaration(symbol.valueDeclaration, context));
            }
            else if (ts.isSpreadAssignment(property)) {
                var spread = this.visitExpression(property.expression, context);
                if (isDynamicValue(spread)) {
                    return DYNAMIC_VALUE;
                }
                if (!(spread instanceof Map)) {
                    throw new Error("Unexpected value in spread assignment: " + spread);
                }
                spread.forEach(function (value, key) { return map.set(key, value); });
            }
            else {
                return DYNAMIC_VALUE;
            }
        }
        return map;
    };
    StaticInterpreter.prototype.visitTemplateExpression = function (node, context) {
        var pieces = [node.head.text];
        for (var i = 0; i < node.templateSpans.length; i++) {
            var span = node.templateSpans[i];
            var value = this.visit(span.expression, context);
            if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean' ||
                value == null) {
                pieces.push("" + value);
            }
            else {
                return DYNAMIC_VALUE;
            }
            pieces.push(span.literal.text);
        }
        return pieces.join('');
    };
    StaticInterpreter.prototype.visitIdentifier = function (node, context) {
        var decl = this.host.getDeclarationOfIdentifier(node);
        if (decl === null) {
            return DYNAMIC_VALUE;
        }
        var result = this.visitDeclaration(decl.node, __assign({}, context, { absoluteModuleName: decl.viaModule || context.absoluteModuleName }));
        if (result instanceof Reference) {
            return result.withIdentifier(node);
        }
        else {
            return result;
        }
    };
    StaticInterpreter.prototype.visitDeclaration = function (node, context) {
        if (this.host.isClass(node)) {
            return this.getReference(node, context);
        }
        else if (ts.isVariableDeclaration(node)) {
            if (!node.initializer) {
                return undefined;
            }
            return this.visitExpression(node.initializer, context);
        }
        else if (ts.isParameter(node) && context.scope.has(node)) {
            return context.scope.get(node);
        }
        else if (ts.isExportAssignment(node)) {
            return this.visitExpression(node.expression, context);
        }
        else if (ts.isSourceFile(node)) {
            return this.visitSourceFile(node, context);
        }
        else {
            return this.getReference(node, context);
        }
    };
    StaticInterpreter.prototype.visitElementAccessExpression = function (node, context) {
        var lhs = this.visitExpression(node.expression, context);
        if (node.argumentExpression === undefined) {
            throw new Error("Expected argument in ElementAccessExpression");
        }
        if (isDynamicValue(lhs)) {
            return DYNAMIC_VALUE;
        }
        var rhs = this.visitExpression(node.argumentExpression, context);
        if (isDynamicValue(rhs)) {
            return DYNAMIC_VALUE;
        }
        if (typeof rhs !== 'string' && typeof rhs !== 'number') {
            throw new Error("ElementAccessExpression index should be string or number, got " + typeof rhs + ": " + rhs);
        }
        return this.accessHelper(lhs, rhs, context);
    };
    StaticInterpreter.prototype.visitPropertyAccessExpression = function (node, context) {
        var lhs = this.visitExpression(node.expression, context);
        var rhs = node.name.text;
        // TODO: handle reference to class declaration.
        if (isDynamicValue(lhs)) {
            return DYNAMIC_VALUE;
        }
        return this.accessHelper(lhs, rhs, context);
    };
    StaticInterpreter.prototype.visitSourceFile = function (node, context) {
        var _this = this;
        var declarations = this.host.getExportsOfModule(node);
        if (declarations === null) {
            return DYNAMIC_VALUE;
        }
        var map = new Map();
        declarations.forEach(function (decl, name) {
            var value = _this.visitDeclaration(decl.node, __assign({}, context, { absoluteModuleName: decl.viaModule || context.absoluteModuleName }));
            map.set(name, value);
        });
        return map;
    };
    StaticInterpreter.prototype.accessHelper = function (lhs, rhs, context) {
        var strIndex = "" + rhs;
        if (lhs instanceof Map) {
            if (lhs.has(strIndex)) {
                return lhs.get(strIndex);
            }
            else {
                throw new Error("Invalid map access: [" + Array.from(lhs.keys()) + "] dot " + rhs);
            }
        }
        else if (Array.isArray(lhs)) {
            if (rhs === 'length') {
                return lhs.length;
            }
            if (typeof rhs !== 'number' || !Number.isInteger(rhs)) {
                return DYNAMIC_VALUE;
            }
            if (rhs < 0 || rhs >= lhs.length) {
                throw new Error("Index out of bounds: " + rhs + " vs " + lhs.length);
            }
            return lhs[rhs];
        }
        else if (lhs instanceof Reference) {
            var ref = lhs.node;
            if (isPossibleClassDeclaration(ref) && this.host.isClass(ref)) {
                var absoluteModuleName = context.absoluteModuleName;
                if (lhs instanceof NodeReference || lhs instanceof AbsoluteReference) {
                    absoluteModuleName = lhs.moduleName || absoluteModuleName;
                }
                var value = undefined;
                var member = this.host.getMembersOfClass(ref).find(function (member) { return member.isStatic && member.name === strIndex; });
                if (member !== undefined) {
                    if (member.value !== null) {
                        value = this.visitExpression(member.value, context);
                    }
                    else if (member.implementation !== null) {
                        value = new NodeReference(member.implementation, absoluteModuleName);
                    }
                    else {
                        value = new NodeReference(member.node, absoluteModuleName);
                    }
                }
                return value;
            }
        }
        throw new Error("Invalid dot property access: " + lhs + " dot " + rhs);
    };
    StaticInterpreter.prototype.visitCallExpression = function (node, context) {
        var _this = this;
        var lhs = this.visitExpression(node.expression, context);
        if (!(lhs instanceof Reference)) {
            throw new Error("attempting to call something that is not a function: " + lhs);
        }
        else if (!isFunctionOrMethodDeclaration(lhs.node)) {
            throw new Error("calling something that is not a function declaration? " + ts.SyntaxKind[lhs.node.kind]);
        }
        var fn = lhs.node;
        // If the function is foreign (declared through a d.ts file), attempt to resolve it with the
        // foreignFunctionResolver, if one is specified.
        if (fn.body === undefined) {
            var expr = null;
            if (context.foreignFunctionResolver) {
                expr = context.foreignFunctionResolver(fn);
            }
            if (expr === null) {
                throw new Error("could not resolve foreign function declaration");
            }
            // If the function is declared in a different file, resolve the foreign function expression
            // using the absolute module name of that file (if any).
            var absoluteModuleName = context.absoluteModuleName;
            if (lhs instanceof NodeReference || lhs instanceof AbsoluteReference) {
                absoluteModuleName = lhs.moduleName || absoluteModuleName;
            }
            return this.visitExpression(expr, __assign({}, context, { absoluteModuleName: absoluteModuleName }));
        }
        var body = fn.body;
        if (body.statements.length !== 1 || !ts.isReturnStatement(body.statements[0])) {
            throw new Error('Function body must have a single return statement only.');
        }
        var ret = body.statements[0];
        var newScope = new Map();
        fn.parameters.forEach(function (param, index) {
            var value = undefined;
            if (index < node.arguments.length) {
                var arg = node.arguments[index];
                value = _this.visitExpression(arg, context);
            }
            if (value === undefined && param.initializer !== undefined) {
                value = _this.visitExpression(param.initializer, context);
            }
            newScope.set(param, value);
        });
        return ret.expression !== undefined ?
            this.visitExpression(ret.expression, __assign({}, context, { scope: newScope })) :
            undefined;
    };
    StaticInterpreter.prototype.visitConditionalExpression = function (node, context) {
        var condition = this.visitExpression(node.condition, context);
        if (isDynamicValue(condition)) {
            return condition;
        }
        if (condition) {
            return this.visitExpression(node.whenTrue, context);
        }
        else {
            return this.visitExpression(node.whenFalse, context);
        }
    };
    StaticInterpreter.prototype.visitPrefixUnaryExpression = function (node, context) {
        var operatorKind = node.operator;
        if (!UNARY_OPERATORS.has(operatorKind)) {
            throw new Error("Unsupported prefix unary operator: " + ts.SyntaxKind[operatorKind]);
        }
        var op = UNARY_OPERATORS.get(operatorKind);
        var value = this.visitExpression(node.operand, context);
        return isDynamicValue(value) ? DYNAMIC_VALUE : op(value);
    };
    StaticInterpreter.prototype.visitBinaryExpression = function (node, context) {
        var tokenKind = node.operatorToken.kind;
        if (!BINARY_OPERATORS.has(tokenKind)) {
            throw new Error("Unsupported binary operator: " + ts.SyntaxKind[tokenKind]);
        }
        var opRecord = BINARY_OPERATORS.get(tokenKind);
        var lhs, rhs;
        if (opRecord.literal) {
            lhs = literal(this.visitExpression(node.left, context));
            rhs = literal(this.visitExpression(node.right, context));
        }
        else {
            lhs = this.visitExpression(node.left, context);
            rhs = this.visitExpression(node.right, context);
        }
        return isDynamicValue(lhs) || isDynamicValue(rhs) ? DYNAMIC_VALUE : opRecord.op(lhs, rhs);
    };
    StaticInterpreter.prototype.visitParenthesizedExpression = function (node, context) {
        return this.visitExpression(node.expression, context);
    };
    StaticInterpreter.prototype.stringNameFromPropertyName = function (node, context) {
        if (ts.isIdentifier(node) || ts.isStringLiteral(node) || ts.isNumericLiteral(node)) {
            return node.text;
        }
        else { // ts.ComputedPropertyName
            var literal_1 = this.visitExpression(node.expression, context);
            return typeof literal_1 === 'string' ? literal_1 : undefined;
        }
    };
    StaticInterpreter.prototype.getReference = function (node, context) {
        var id = identifierOfDeclaration(node);
        if (id === undefined) {
            throw new Error("Don't know how to refer to " + ts.SyntaxKind[node.kind]);
        }
        if (context.absoluteModuleName !== null) {
            // TODO(alxhub): investigate whether this can get symbol names wrong in the event of
            // re-exports under different names.
            return new AbsoluteReference(node, id, context.absoluteModuleName, id.text);
        }
        else {
            return new ResolvedReference(node, id);
        }
    };
    return StaticInterpreter;
}());
function isFunctionOrMethodDeclaration(node) {
    return ts.isFunctionDeclaration(node) || ts.isMethodDeclaration(node);
}
function literal(value) {
    if (value === null || value === undefined || typeof value === 'string' ||
        typeof value === 'number' || typeof value === 'boolean') {
        return value;
    }
    if (isDynamicValue(value)) {
        return DYNAMIC_VALUE;
    }
    throw new Error("Value " + value + " is not literal and cannot be used in this context.");
}
function identifierOfDeclaration(decl) {
    if (ts.isClassDeclaration(decl)) {
        return decl.name;
    }
    else if (ts.isFunctionDeclaration(decl)) {
        return decl.name;
    }
    else if (ts.isVariableDeclaration(decl) && ts.isIdentifier(decl.name)) {
        return decl.name;
    }
    else if (ts.isShorthandPropertyAssignment(decl)) {
        return decl.name;
    }
    else {
        return undefined;
    }
}
function isPossibleClassDeclaration(node) {
    return ts.isClassDeclaration(node) || ts.isVariableDeclaration(node);
}
//# sourceMappingURL=data:application/json;base64,