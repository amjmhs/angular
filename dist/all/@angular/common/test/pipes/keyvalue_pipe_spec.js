"use strict";
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = require("@angular/common");
var core_1 = require("@angular/core");
var testing_internal_1 = require("@angular/core/testing/src/testing_internal");
var keyvalue_pipe_1 = require("../../src/pipes/keyvalue_pipe");
testing_internal_1.describe('KeyValuePipe', function () {
    testing_internal_1.it('should return null when given null', function () {
        var pipe = new common_1.KeyValuePipe(core_1.ɵdefaultKeyValueDiffers);
        testing_internal_1.expect(pipe.transform(null)).toEqual(null);
    });
    testing_internal_1.it('should return null when given undefined', function () {
        var pipe = new common_1.KeyValuePipe(core_1.ɵdefaultKeyValueDiffers);
        testing_internal_1.expect(pipe.transform(undefined)).toEqual(null);
    });
    testing_internal_1.it('should return null for an unsupported type', function () {
        var pipe = new common_1.KeyValuePipe(core_1.ɵdefaultKeyValueDiffers);
        var fn = function () { };
        testing_internal_1.expect(pipe.transform(fn)).toEqual(null);
    });
    testing_internal_1.describe('object dictionary', function () {
        testing_internal_1.it('should transform a basic dictionary', function () {
            var pipe = new common_1.KeyValuePipe(core_1.ɵdefaultKeyValueDiffers);
            testing_internal_1.expect(pipe.transform({ 1: 2 })).toEqual([{ key: '1', value: 2 }]);
        });
        testing_internal_1.it('should order by alpha', function () {
            var pipe = new common_1.KeyValuePipe(core_1.ɵdefaultKeyValueDiffers);
            testing_internal_1.expect(pipe.transform({ 'b': 1, 'a': 1 })).toEqual([
                { key: 'a', value: 1 }, { key: 'b', value: 1 }
            ]);
        });
        testing_internal_1.it('should order by numerical', function () {
            var pipe = new common_1.KeyValuePipe(core_1.ɵdefaultKeyValueDiffers);
            testing_internal_1.expect(pipe.transform({ 2: 1, 1: 1 })).toEqual([{ key: '1', value: 1 }, { key: '2', value: 1 }]);
        });
        testing_internal_1.it('should order by numerical and alpha', function () {
            var pipe = new common_1.KeyValuePipe(core_1.ɵdefaultKeyValueDiffers);
            var input = { 2: 1, 1: 1, 'b': 1, 0: 1, 3: 1, 'a': 1 };
            testing_internal_1.expect(pipe.transform(input)).toEqual([
                { key: '0', value: 1 }, { key: '1', value: 1 }, { key: '2', value: 1 }, { key: '3', value: 1 },
                { key: 'a', value: 1 }, { key: 'b', value: 1 }
            ]);
        });
        testing_internal_1.it('should return the same ref if nothing changes', function () {
            var pipe = new common_1.KeyValuePipe(core_1.ɵdefaultKeyValueDiffers);
            var transform1 = pipe.transform({ 1: 2 });
            var transform2 = pipe.transform({ 1: 2 });
            testing_internal_1.expect(transform1 === transform2).toEqual(true);
        });
        testing_internal_1.it('should return a new ref if something changes', function () {
            var pipe = new common_1.KeyValuePipe(core_1.ɵdefaultKeyValueDiffers);
            var transform1 = pipe.transform({ 1: 2 });
            var transform2 = pipe.transform({ 1: 3 });
            testing_internal_1.expect(transform1 !== transform2).toEqual(true);
        });
    });
    testing_internal_1.describe('Map', function () {
        testing_internal_1.it('should transform a basic Map', function () {
            var pipe = new common_1.KeyValuePipe(core_1.ɵdefaultKeyValueDiffers);
            testing_internal_1.expect(pipe.transform(new Map([[1, 2]]))).toEqual([{ key: 1, value: 2 }]);
        });
        testing_internal_1.it('should order by alpha', function () {
            var pipe = new common_1.KeyValuePipe(core_1.ɵdefaultKeyValueDiffers);
            testing_internal_1.expect(pipe.transform(new Map([['b', 1], ['a', 1]]))).toEqual([
                { key: 'a', value: 1 }, { key: 'b', value: 1 }
            ]);
        });
        testing_internal_1.it('should order by numerical', function () {
            var pipe = new common_1.KeyValuePipe(core_1.ɵdefaultKeyValueDiffers);
            testing_internal_1.expect(pipe.transform(new Map([[2, 1], [1, 1]]))).toEqual([
                { key: 1, value: 1 }, { key: 2, value: 1 }
            ]);
        });
        testing_internal_1.it('should order by numerical and alpha', function () {
            var pipe = new common_1.KeyValuePipe(core_1.ɵdefaultKeyValueDiffers);
            var input = [[2, 1], [1, 1], ['b', 1], [0, 1], [3, 1], ['a', 1]];
            testing_internal_1.expect(pipe.transform(new Map(input))).toEqual([
                { key: 0, value: 1 }, { key: 1, value: 1 }, { key: 2, value: 1 }, { key: 3, value: 1 },
                { key: 'a', value: 1 }, { key: 'b', value: 1 }
            ]);
        });
        testing_internal_1.it('should order by complex types with compareFn', function () {
            var pipe = new common_1.KeyValuePipe(core_1.ɵdefaultKeyValueDiffers);
            var input = new Map([[{ id: 1 }, 1], [{ id: 0 }, 1]]);
            testing_internal_1.expect(pipe.transform(input, function (a, b) { return a.key.id > b.key.id ? 1 : -1; }))
                .toEqual([
                { key: { id: 0 }, value: 1 },
                { key: { id: 1 }, value: 1 },
            ]);
        });
        testing_internal_1.it('should return the same ref if nothing changes', function () {
            var pipe = new common_1.KeyValuePipe(core_1.ɵdefaultKeyValueDiffers);
            var transform1 = pipe.transform(new Map([[1, 2]]));
            var transform2 = pipe.transform(new Map([[1, 2]]));
            testing_internal_1.expect(transform1 === transform2).toEqual(true);
        });
        testing_internal_1.it('should return a new ref if something changes', function () {
            var pipe = new common_1.KeyValuePipe(core_1.ɵdefaultKeyValueDiffers);
            var transform1 = pipe.transform(new Map([[1, 2]]));
            var transform2 = pipe.transform(new Map([[1, 3]]));
            testing_internal_1.expect(transform1 !== transform2).toEqual(true);
        });
    });
});
testing_internal_1.describe('defaultComparator', function () {
    testing_internal_1.it('should remain the same order when keys are equal', function () {
        var key = 1;
        var values = [{ key: key, value: 2 }, { key: key, value: 1 }];
        testing_internal_1.expect(values.sort(keyvalue_pipe_1.defaultComparator)).toEqual(values);
    });
    testing_internal_1.it('should sort undefined keys to the end', function () {
        var values = [{ key: 3, value: 1 }, { key: undefined, value: 3 }, { key: 1, value: 2 }];
        testing_internal_1.expect(values.sort(keyvalue_pipe_1.defaultComparator)).toEqual([
            { key: 1, value: 2 }, { key: 3, value: 1 }, { key: undefined, value: 3 }
        ]);
    });
    testing_internal_1.it('should sort null keys to the end', function () {
        var values = [{ key: 3, value: 1 }, { key: null, value: 3 }, { key: 1, value: 2 }];
        testing_internal_1.expect(values.sort(keyvalue_pipe_1.defaultComparator)).toEqual([
            { key: 1, value: 2 }, { key: 3, value: 1 }, { key: null, value: 3 }
        ]);
    });
    testing_internal_1.it('should sort strings in alpha ascending', function () {
        var values = [{ key: 'b', value: 1 }, { key: 'a', value: 3 }];
        testing_internal_1.expect(values.sort(keyvalue_pipe_1.defaultComparator)).toEqual([{ key: 'a', value: 3 }, { key: 'b', value: 1 }]);
    });
    testing_internal_1.it('should sort numbers in numerical ascending', function () {
        var values = [{ key: 2, value: 1 }, { key: 1, value: 3 }];
        testing_internal_1.expect(values.sort(keyvalue_pipe_1.defaultComparator)).toEqual([{ key: 1, value: 3 }, { key: 2, value: 1 }]);
    });
    testing_internal_1.it('should sort boolean in false (0) -> true (1)', function () {
        var values = [{ key: true, value: 3 }, { key: false, value: 1 }];
        testing_internal_1.expect(values.sort(keyvalue_pipe_1.defaultComparator)).toEqual([{ key: false, value: 1 }, { key: true, value: 3 }]);
    });
    testing_internal_1.it('should sort numbers as strings in numerical ascending', function () {
        var values = [{ key: '2', value: 1 }, { key: 1, value: 3 }];
        testing_internal_1.expect(values.sort(keyvalue_pipe_1.defaultComparator)).toEqual([{ key: 1, value: 3 }, { key: '2', value: 1 }]);
    });
});
//# sourceMappingURL=data:application/json;base64,